<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>嵌入式Linux内核移植两三事</title>
    <link href="/2025/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E5%86%85%E6%A0%B8%E7%A7%BB%E6%A4%8D%E4%B8%A4%E4%B8%89%E4%BA%8B/"/>
    <url>/2025/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E5%86%85%E6%A0%B8%E7%A7%BB%E6%A4%8D%E4%B8%A4%E4%B8%89%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="嵌入式Linux内核移植两三事"><a href="#嵌入式Linux内核移植两三事" class="headerlink" title="嵌入式Linux内核移植两三事"></a>嵌入式Linux内核移植两三事</h1><h2 id="内核源码的来源"><a href="#内核源码的来源" class="headerlink" title="内核源码的来源"></a>内核源码的来源</h2><p>有三种方式：</p><ol><li><code>Linux</code>社区</li><li>芯片原厂（如恩智浦<code>linux-imx</code>）</li><li>板卡厂商（如韬睿<code>toradex</code>）</li></ol><h3 id="Linux社区"><a href="#Linux社区" class="headerlink" title="Linux社区"></a>Linux社区</h3><p>优势：更注重通用性</p><p>劣势：没有对单个具体平台的优化</p><h3 id="芯片原厂"><a href="#芯片原厂" class="headerlink" title="芯片原厂"></a>芯片原厂</h3><p>优势：在社区源码的基础上，针对某款芯片（如<code>imx8qm</code>）做了优化，适配了特定的<code>BSP</code>驱动，而这些驱动可能并还没来得及合入社区主线</p><p>劣势：易用性不足，文档不足</p><h3 id="板卡厂商"><a href="#板卡厂商" class="headerlink" title="板卡厂商"></a>板卡厂商</h3><p>优势：注重用户体验，文档充足</p><p>劣势：封装更好意味着学习者对原理的理解会不足</p><h2 id="内核移植的三个类型"><a href="#内核移植的三个类型" class="headerlink" title="内核移植的三个类型"></a>内核移植的三个类型</h2><h3 id="内核架构移植"><a href="#内核架构移植" class="headerlink" title="内核架构移植"></a>内核架构移植</h3><p>将<code>Linux</code>内核从一种架构（如<code>x86</code>）移植到另一种架构（如<code>ARM</code>等）</p><p>影响范围：通常需要调整内核体系结构相关的代码</p><blockquote><p>[!NOTE]</p><p>通常由芯片原厂进行</p></blockquote><h4 id="内核体系结构都涉及哪些代码？"><a href="#内核体系结构都涉及哪些代码？" class="headerlink" title="内核体系结构都涉及哪些代码？"></a>内核体系结构都涉及哪些代码？</h4><h3 id="BSP移植"><a href="#BSP移植" class="headerlink" title="BSP移植"></a>BSP移植</h3><h4 id="BSP是什么？"><a href="#BSP是什么？" class="headerlink" title="BSP是什么？"></a>BSP是什么？</h4><p><code>BSP</code>是<code>board support package</code>的缩写，也就是板级支持包，其主要作用是可以将硬件和<code>Linux</code>内核连接起来</p><p>也就是说：<code>BSP</code>提供了<code>Linux</code>内核可以在硬件上跑起来的所有环境，包括设备树，驱动等</p><h4 id="BSP移植的内容"><a href="#BSP移植的内容" class="headerlink" title="BSP移植的内容"></a>BSP移植的内容</h4><p>将<code>Linux</code>内核移植到一个新的开发板或嵌入式设备上</p><p>影响范围：新硬件的驱动，设备树，引导加载程序等</p><blockquote><p>[!NOTE]</p><p>通常由板卡厂商来进行</p></blockquote><h3 id="平台移植"><a href="#平台移植" class="headerlink" title="平台移植"></a>平台移植</h3><p>将<code>Linux</code>内核从一个特定硬件平台移植到另一个特定硬件平台</p><p>影响范围：设备树文件或配置，外设删减，引脚复用等</p><blockquote><p>[!NOTE]</p><p>通常由终端客户进行</p></blockquote><h2 id="烧录"><a href="#烧录" class="headerlink" title="烧录"></a>烧录</h2><p>嵌入式的板卡，一般除了运行内存<code>RAM</code>之外，还会有焊接在板子上的，称为<code>eMMC</code>的<code>NAND</code>闪存（就是通常意义上的磁盘）</p><p>运行内存的部分特殊区域，会直接映射到<code>eMMC</code>上，当然也会有其他设备的寄存器区域，详细信息需要查看板卡的<code>Reference Manual</code>，其中有一章<code>Memory Map</code>，讲述了内存的布局</p><p>板卡复位后，会从指定的地址（这个地址往往是板卡厂商预设好的）开始执行，也就是<code>bootstrap</code>阶段，这个在传统PC上就是执行<code>BIOS</code>代码的地方，这个阶段会初始化一些基本的硬件组件，比如时钟，<code>DDR(内存)</code>，等，然后检测启动设备，比如从<code>SD</code>卡启动，从<code>eMMC</code>启动等</p><p>以<code>eMMC</code>为例，接着就是读取<code>eMMC</code>中的<code>uboot</code>，<code>uboot</code>负责加载内核镜像和设备树，接着交给内核执行，内核读取根文件系统，启动完成</p><p>通过上面的分析，<code>bootstrap</code>阶段的代码是芯片厂商内置在<code>ROM</code>中的，这个代码不需要我们插手，嵌入式工程师需要关注的有四个部分：</p><ol><li>引导加载器<code>uboot</code></li><li>内核<code>image</code></li><li>设备树<code>dtb</code></li><li>根文件系统<code>ramdisk</code></li></ol><p>其中引导加载器主要负责初始化硬件，然后加载内核，设备树，根文件系统，之后将执行流交给内核（注意，<code>uboot</code>只是加载设备树和根文件到内存中，具体对它们的解析是由内核完成的，<code>uboot</code>只是将其在内存中的地址传给内核）</p><p>内核也就是操作系统本身</p><p>设备树用来告诉内核，你有哪些硬件可以使用，硬件规格是什么</p><p>根文件系统则放置了一些基本的命令，你可以通过根文件系统里面的<code>shell</code>和内核进行交互(没有根文件系统的内核，没有交互可言)</p><blockquote><p>[!IMPORTANT]</p><p>发现了么？所谓的启动，至少要有三次，一次是<code>BIOS</code>代码，一次是<code>uboot</code>（服务器上可能是<code>grub</code>等），一次是内核。并且它们都要初始化硬件</p><p>比如<code>BIOS</code>至少要初始化时钟和<code>DDR</code>（没有<code>DDR</code>都没法去执行<code>uboot</code>了，所有的可执行代码都要放在内存上才能执行）</p><p><code>uboot</code>要初始化比如时钟，串口<code>UART</code>，网卡<code>ENET</code>等硬件，然后加载内核</p><p>在内核中，也要初始化硬件，这次是内核要用到的所有硬件（硬件信息从设备树中获取）</p><p>其中内核初始化后的硬件功能最完整，最强大，前面两个阶段的硬件初始化只是为内核打地基（比如<code>uboot</code>不会初始化<code>PCIE</code>相关的硬件，因为<code>uboot</code>用不到）</p></blockquote><p>那么，终于回到本章主题，所谓烧录就是指，将上面讨论的那四个组件，写入到嵌入式板卡的持久化存储设备中（常见是<code>eMMC</code>）</p><p>目标定下了，途径也可以是多种多样的，常见的有<code>OTG</code>烧录，网络烧录，<code>SD</code>卡烧录，<code>JTAG</code>烧录等</p><p>现在来考虑，一个裸机的嵌入式板卡，除了固件里面有一段<code>BIOS</code>代码之外，其余什么都没有，而焊接在板卡上的<code>eMMC</code>是块设备，使用它的前提是对块设备进行分区（通常使用<code>fdisk, parted</code>等），并对其分区格式化好某种文件系统（<code>mkfs.vfat, mkfs.ext3</code>等）</p><blockquote><p>[!TIP]</p><p>比如启动分区（内核镜像，设备树等内容所在的分区）一般是<code>FAT32</code></p><p>根文件系统的分区一般是<code>ext3</code>，<code>ext4</code>等</p><p>顺便一提，<code>fdisk</code>只能格式化为<code>DOS</code>分区，也就是<code>MBR</code>主引导目录格式</p><p><code>parted</code>可以格式化为<code>GPT</code>分区</p></blockquote><p>请注意，格式化磁盘一般是操作系统才有的功能，而嵌入式板子上的<code>eMMC</code>是焊接在板子上的，你也不可能把它取下来，挂载在一个<code>Linux</code>&#x2F;<code>Windows</code>&#x2F;<code>Mac</code>上对其进行格式化，这就需要一些巧妙的方式，接下来我们一一道来。</p><h3 id="OTG烧录"><a href="#OTG烧录" class="headerlink" title="OTG烧录"></a>OTG烧录</h3><p>所谓<code>OTG</code>就是<code>USB On - The - Go(OTG)</code>技术允许设备在没有主机（如计算机）的情况下，直接进行设备间的数据传输。在 OTG 烧录中，通常是将具备 OTG 功能的嵌入式设备与存储有镜像文件的 USB 存储设备（如 U 盘）直接连接，或者与另一台作为烧录主机的设备连接。嵌入式设备通过内置的 OTG 驱动程序识别 USB 存储设备，并从中读取镜像文件，然后按照预设的烧录流程将镜像写入自身的存储介质中。</p><blockquote><p>[!TIP]</p><p><code>OTG</code>需要硬件支持，即：</p><ol><li>开发板需要支持<code>OTG</code></li><li>开发板连接到主机</li><li>主机有<code>OTG</code>驱动程序和相关依赖库</li></ol></blockquote><p>一般的操作是：连接开发板，直接将一份镜像（包括<code>uboot</code>，<code>image</code>，<code>dtb</code>，<code>ramdisk</code>）通过<code>OTG</code>放入<strong>嵌入式设备的内存</strong>中，然后启动这个跳转到这个<code>image</code>启动，这样开发板上就有了一个操作系统可用，就可以直接用这个操作系统格式化好<code>eMMC</code>，然后把要烧录进板子的镜像拷贝到<code>eMMC</code>上，就烧录好了，再次启动时，<code>BIOS</code>从<code>eMMC</code>启动，就可以启动拷贝进来的系统了</p><p>格式化<code>eMMC</code>一般会分两个分区，一个<code>boot</code>分区，一个文件系统分区，<code>boot</code>分区中存放内核，设备树，文件系统分区存放根文件系统</p><p>在<code>eMMC</code> 上，<code>uboot</code>所在的分区一般是写保护的，如果你想要写这个分区，需要先打开写保护（把只读关掉）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 这里的boot0就是eMMC特有的启动分区，eMMC的每一个硬件分区都是独立编址的</span><br><span class="hljs-built_in">echo</span> 0 &gt; /sys/block/mmcblkxxxboot0/force_ro<br></code></pre></td></tr></table></figure><p>下面开始拷贝镜像，先是<code>uboot</code>，拷贝到<code>eMMC</code>的<code>boot0</code>分区里面</p><p>然后格式化<code>boot</code>分区，将其格式化为<code>FAT32</code>，挂载该分区，然后放入内核镜像和设备树，卸载该分区</p><p>最后格式化文件系统分区，将其格式化为<code>ext3/4</code>，挂载该分区，然后放入根文件系统，以及可能需要到的内核模块，卸载该分区</p><p>这时，开发板已经烧录好系统了</p><h3 id="SD卡烧录"><a href="#SD卡烧录" class="headerlink" title="SD卡烧录"></a>SD卡烧录</h3><p>首先准备一个<code>SD</code>卡，先将其<code>fdisk</code>进行分区，并将其格式化为<code>FAT32</code>，然后将一个格式化板卡<code>eMMC</code>的镜像（引导固件），和要烧写到板卡上的镜像（烧写在板卡上的操作系统），都拷贝到这个<code>SD</code>卡中</p><p>板卡设定为从<code>SD</code>卡启动，然后会首先去读取<code>uboot</code>，<code>uboot</code>去加载内核和设备树，挂载根文件系统，此时一个操作系统已经启动了，就可以用这个操作系统将要烧写的镜像拷贝到<code>eMMC</code>中了（和上面<code>OTG</code>步骤一样，先格式化<code>eMMC</code>，然后拷贝）</p>]]></content>
    
    
    <categories>
      
      <category>嵌入式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>嵌入式</tag>
      
      <tag>Linux内核移植</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
