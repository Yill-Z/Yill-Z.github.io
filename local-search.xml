<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Make语言详解</title>
    <link href="/2025/01/01/Make/"/>
    <url>/2025/01/01/Make/</url>
    
    <content type="html"><![CDATA[<h1 id="Make"><a href="#Make" class="headerlink" title="Make"></a>Make</h1><h2 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作"></a>赋值操作</h2><p><code>=</code>：赋值，将右值赋给左值</p><p><code>?=</code>：条件赋值，如果变量没有初始化，就用右边初始化左边</p><p><code>:=</code>：直接赋值，不过展开方式不同</p><p><code>::=</code>：与<code>:=</code>一致</p><p><code>+=</code>：追加赋值</p><p><code>!=</code>：右值为一条shell命令，shell命令的输出赋给左值</p><div class="note note-info">            <p><code>!=</code>例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">var != <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello&quot;</span>  <span class="hljs-comment">#此处var的值就是hello</span><br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">var := <span class="hljs-variable">$&#123;shell echo &quot;hello&quot;&#125;</span> <span class="hljs-comment">#这里的shell是Make的内建函数，表示后面接的参数是shell命令，并且返回该命令的结果</span><br></code></pre></td></tr></table></figure><p>在Makefile中使用<code>$</code>，要用<code>$$</code>表示，shell中用<code>\$</code></p>          </div><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量的扩展方式"><a href="#变量的扩展方式" class="headerlink" title="变量的扩展方式"></a>变量的扩展方式</h3><h4 id="简单扩展"><a href="#简单扩展" class="headerlink" title="简单扩展"></a>简单扩展</h4><p>赋值时就确定了变量的值，不管它是否引用了其他变量，<code>:=</code>，<code>::=</code>，<code>!=</code>都是简单扩展</p><h4 id="循环递归扩展"><a href="#循环递归扩展" class="headerlink" title="循环递归扩展"></a>循环递归扩展</h4><p>在赋值时不确定，如果引用了其他变量，make会先确定其他变量，然后再确定该变量，<code>=</code>，<code>?=</code>属于循环变量</p><h4 id="直接扩展"><a href="#直接扩展" class="headerlink" title="直接扩展"></a>直接扩展</h4><p><code>+=</code>属于直接扩展，原变量是啥，左边就是啥</p><h3 id="创建私有变量"><a href="#创建私有变量" class="headerlink" title="创建私有变量"></a>创建私有变量</h3><p>默认是全局变量，若要使用私有变量，使用<code>private</code></p><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><p>删除变量使用<code>unset</code></p><h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><p><code>$@</code>：表示所有目标</p><p><code>$&lt;</code>：依赖中的第一个依赖</p><p><code>$^</code>：依赖列表中的所有文件</p><p><code>$?</code>：依赖列表中所有更新的文件</p><p><code>$*</code>：在模式中，该变量代表茎，也就是<code>%</code>的部分</p><p><code>~</code>：用户家目录</p><p><code>./</code>：Make的当前目录</p><p><code>@</code>：禁止命令回显</p><p><code>-</code>：出错则忽略，而不是报错退出</p><p><code>+</code>：当<code>make -n</code>时，只有带<code>+</code>号的会执行</p><p><code>@:</code>：占位符，防止<code>make</code>出现<code>Nothing to be done</code></p><div class="note note-info">            <p>变量可以定义在命令行中，会覆盖掉<code>make</code>自带的变量</p><p>override：让make采用Makefile的赋值</p><p>make启动时，所有来自环境的变量都成为make变量</p><p>make会在执行一个规则的命令脚本之前，立刻创建自动变量</p>          </div><h2 id="常用Make变量"><a href="#常用Make变量" class="headerlink" title="常用Make变量"></a>常用Make变量</h2><p><code>VPATH</code>：搜文件的路径</p><p><code>MAKEFLAGS</code>：Make的参数</p><p><code>MAKELEVEL</code>：Make的嵌套层数</p><p><code>MAKECMDGOALS</code>：工作目标的列表</p><p><code>CURDIR</code>：当前工作目录</p><p><code>MAKEFILE_LIST</code>：读取的Makefile列表，最后一个是当前的Makefile</p><p><code>MAKE_VERSION</code>：make的版本</p><p><code>VARIABLES</code>：make从各个Makefile读进的变量列表，不含工作目标</p><h2 id="变量扩展规则"><a href="#变量扩展规则" class="headerlink" title="变量扩展规则"></a>变量扩展规则</h2><ol><li>对于变量赋值，make会立即扩展其左边</li><li>对于<code>=</code>，<code>?=</code>，其右边会被延后到变量使用时进行扩展，在分析依存图时进行</li><li><code>:=</code>的右边会立即被扩展</li><li>如果<code>+=</code>的左边是一个简单变量，<code>+=</code>的右边会被立即扩展，否则，其求值会被延后</li><li>对于宏定义，其宏名会被立即扩展，宏体会被延后扩展</li><li>对于规则，工作目标和依赖总是被立即扩展，命令则总是被延时扩展</li></ol><h2 id="工作目标的专属变量"><a href="#工作目标的专属变量" class="headerlink" title="工作目标的专属变量"></a>工作目标的专属变量</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile">target... : variable =, :=, ?=, += value<br></code></pre></td></tr></table></figure><p>专属变量的定义会附加在工作目标之上，且只在该工作目标以及相应的任何必要条件被处理时才会发生作用</p><div class="note note-info">            <p>此类变量的赋值动作会在处理工作目标时进行</p>          </div><h2 id="make参数"><a href="#make参数" class="headerlink" title="make参数"></a>make参数</h2><p><code>-f</code>：指定一个文件作为Makefile</p><p><code>-k</code>：遇到错误不停止，一次发现所有的编译错误</p><p><code>-n</code>：输出将要执行的步骤，而不真的执行</p><p><code>-c</code>：切换到指定目录，执行该目录下的Makefile</p><p><code>-l</code>：指定make去寻找的链接库<code>libName.so</code>或<code>libName.a</code></p><p><code>-s</code>：静默输出</p><h2 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h2><p><code>.PHONY</code>：指示不要将一个目标当作文件来处理</p><div class="note note-info">            <p>伪目标总是最新的</p>          </div><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><h3 id=""><a href="#" class="headerlink" title="*"></a>*</h3><p><code>*</code>匹配任何东西，包括空</p><h3 id="-1"><a href="#-1" class="headerlink" title="?"></a>?</h3><p>通常在依赖中，匹配所有更新的目标</p><div class="note note-info">            <p>使用通配符本身时，需要使用转义字符<code>\</code></p><p>如果使用<code>OBJ = *.o</code>，一般情况下，会匹配通配符，但是若当前目录下没有可匹配的文件，就会将<code>*.o</code>这个字符串赋给<code>OBJ</code></p>          </div><h3 id="通配符函数"><a href="#通配符函数" class="headerlink" title="通配符函数"></a>通配符函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefie">$&#123;wildcard *.o&#125;<br></code></pre></td></tr></table></figure><p>其好处是，如果没有匹配的文件，那么赋给左边的将是一个空</p><h2 id="模式规则"><a href="#模式规则" class="headerlink" title="模式规则"></a>模式规则</h2><p>模式规则类似于普通规则，模式规则中包含模式字符<code>%</code>，包含有模式字符<code>%</code>的目标被用来匹配一个文件名，<code>%</code>可以匹配任何非空字符串，依赖中的<code>%</code>取值依赖于目标的<code>%</code></p><h3 id="静态模式规则"><a href="#静态模式规则" class="headerlink" title="静态模式规则"></a>静态模式规则</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">目标...:目标模式:依赖模式</span><br>命令<br>...<br></code></pre></td></tr></table></figure><h3 id="另一种常用语法"><a href="#另一种常用语法" class="headerlink" title="另一种常用语法"></a>另一种常用语法</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile">$&#123;OBJ : per-pattern=pattern&#125;<br><br><span class="hljs-section">e.g:</span><br><span class="hljs-section">$&#123;OBJ:%.c = %.o&#125;</span><br></code></pre></td></tr></table></figure><p>将OBJ中所有<code>.c</code>后缀文件替换为<code>.o</code>后缀</p><div class="note note-info">            <p>当模式出现在目标和依赖时，由make进行扩展</p><p>当模式出现在命令中时，由shell进行扩展</p>          </div><h2 id="Makefile的执行顺序"><a href="#Makefile的执行顺序" class="headerlink" title="Makefile的执行顺序"></a>Makefile的执行顺序</h2><ol><li>读入所有的Makefile</li><li>初始化变量</li><li>分析规则，若有显式规则，则加入依赖库，若没有，则分析隐式规则</li><li>根据依赖关系，决定哪些目标需要更新</li><li>执行命令</li></ol><h2 id="命令脚本初始化的顺序"><a href="#命令脚本初始化的顺序" class="headerlink" title="命令脚本初始化的顺序"></a>命令脚本初始化的顺序</h2><ol><li>读取程序代码</li><li>扩展变量</li><li>对make表达式求值</li><li>执行命令</li></ol><div class="note note-info">            <ol><li>命令脚本的求值会被延后的执行的时候</li><li>ifdef的处理会在读入的时候</li><li>在执行之前，首先会看是否有可扩展的变量和可求值的表达式</li><li>宏被扩展时，会为每一行增加tab</li></ol>          </div><h2 id="Make内置函数"><a href="#Make内置函数" class="headerlink" title="Make内置函数"></a>Make内置函数</h2><p>调用方式：<code>$&#123;&lt;function_name&gt; &lt;arguments&gt;&#125;</code>，参数之间以逗号comma分割，函数名和参数之间以空格分割</p><h3 id="字符串操作函数"><a href="#字符串操作函数" class="headerlink" title="字符串操作函数"></a>字符串操作函数</h3><h4 id="subst——字符串替换"><a href="#subst——字符串替换" class="headerlink" title="subst——字符串替换"></a>subst——字符串替换</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">subst</span> &lt;from&gt;, &lt;to&gt;, &lt;text&gt;)</span><br></code></pre></td></tr></table></figure><p>返回替换过后的字符串</p><h4 id="patsubst——模式字符串替换"><a href="#patsubst——模式字符串替换" class="headerlink" title="patsubst——模式字符串替换"></a>patsubst——模式字符串替换</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">patsubst</span> &lt;pattern&gt;, &lt;replacement&gt;, &lt;text&gt;)</span><br></code></pre></td></tr></table></figure><p>查找<code>text</code>中的单词（以空白符分割）是否符合<code>pattern</code>，如匹配则以<code>replacement</code>替换，如果<code>replacement</code>中含有<code>%</code>，则与<code>pattern</code>中的<code>%</code>含义一致</p><p>返回被替换后的字符串</p><h4 id="strip——去空格函数"><a href="#strip——去空格函数" class="headerlink" title="strip——去空格函数"></a>strip——去空格函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">strip</span> &lt;string&gt;)</span><br></code></pre></td></tr></table></figure><p>去掉<code>string</code>中开头和结尾的空格</p><p>返回去掉首位空格后的字符串</p><h4 id="findstring——查找字符串"><a href="#findstring——查找字符串" class="headerlink" title="findstring——查找字符串"></a>findstring——查找字符串</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">findstring</span> &lt;find&gt;,&lt;in&gt;)</span><br></code></pre></td></tr></table></figure><p>在<code>in</code>中查找<code>find</code>子串</p><p>如果找到，返回<code>find</code>，否则返回空</p><h4 id="filter——过滤函数"><a href="#filter——过滤函数" class="headerlink" title="filter——过滤函数"></a>filter——过滤函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">filter</span> &lt;pattern...&gt;, &lt;text&gt;)</span><br></code></pre></td></tr></table></figure><p>以<code>pattern</code>模式过滤<code>text</code>字符串中的单词，保留符合<code>pattern</code>模式的单词，可以有多个模式</p><p>返回符合<code>pattern</code>模式的子串</p><h4 id="filter-out——反过滤函数"><a href="#filter-out——反过滤函数" class="headerlink" title="filter-out——反过滤函数"></a>filter-out——反过滤函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">filter</span>-out &lt;pattern&gt;, &lt;text&gt;)</span><br></code></pre></td></tr></table></figure><p>去掉符合<code>pattern</code>模式的子串，可以有多个模式</p><p>返回不符合<code>pattern</code>模式的子串</p><h4 id="sort——排序函数"><a href="#sort——排序函数" class="headerlink" title="sort——排序函数"></a>sort——排序函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">sort</span> &lt;list&gt;)</span><br></code></pre></td></tr></table></figure><p>给<code>list</code>中的单词进行排序（升序），</p><p>返回排序后的字符串，会去掉重复单词</p><h4 id="word——取单词函数"><a href="#word——取单词函数" class="headerlink" title="word——取单词函数"></a>word——取单词函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">word</span> &lt;n&gt;, &lt;text&gt;)</span><br></code></pre></td></tr></table></figure><p>取字串<code>text</code>中的第<code>n</code>个单词，从1开始</p><p>返回<code>text</code>中的第<code>n</code>个单词，如果<code>n</code>比<code>text</code> 中的单词数大，则返回空</p><h4 id="wordlist——取单词串函数"><a href="#wordlist——取单词串函数" class="headerlink" title="wordlist——取单词串函数"></a>wordlist——取单词串函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">wordlist</span> &lt;ss&gt;, &lt;e&gt;, &lt;text&gt;)</span><br></code></pre></td></tr></table></figure><p>从<code>text</code>中取从<code>ss</code>到<code>e</code>的单词</p><p>返回子串，若<code>ss</code>比末尾大，返回空</p><h4 id="words——单词个数统计函数"><a href="#words——单词个数统计函数" class="headerlink" title="words——单词个数统计函数"></a>words——单词个数统计函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(words &lt;text&gt;)</span><br></code></pre></td></tr></table></figure><p>统计<code>text</code>中单词个数</p><p>返回数量</p><h4 id="firstword——首单词函数"><a href="#firstword——首单词函数" class="headerlink" title="firstword——首单词函数"></a>firstword——首单词函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">firstword</span> &lt;text&gt;)</span><br></code></pre></td></tr></table></figure><p>取<code>text</code>中第一个单词</p><p>返回单词字串</p><h3 id="文件名操作函数"><a href="#文件名操作函数" class="headerlink" title="文件名操作函数"></a>文件名操作函数</h3><h4 id="dir——取目录函数"><a href="#dir——取目录函数" class="headerlink" title="dir——取目录函数"></a>dir——取目录函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">dir</span> &lt;names...&gt;)</span><br></code></pre></td></tr></table></figure><p>从文件名序列中取出目录部分，目录部分是指最后一个<code>/</code>之前的部分，如果没有<code>/</code>，则返回<code>./</code></p><p>返回目录名</p><h4 id="notdir——取文件名函数"><a href="#notdir——取文件名函数" class="headerlink" title="notdir——取文件名函数"></a>notdir——取文件名函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">notdir</span> &lt;names...&gt;)</span><br></code></pre></td></tr></table></figure><p>从字符串序列中取出文件名，指最后一个<code>/</code>之后的内容</p><p>返回文件名</p><h4 id="suffix——取后缀函数"><a href="#suffix——取后缀函数" class="headerlink" title="suffix——取后缀函数"></a>suffix——取后缀函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">suffix</span> &lt;names...&gt;)</span><br></code></pre></td></tr></table></figure><p>返回后缀，若无后缀返回空</p><h4 id="basename——取前缀函数"><a href="#basename——取前缀函数" class="headerlink" title="basename——取前缀函数"></a>basename——取前缀函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">basename</span> &lt;names...&gt;)</span><br></code></pre></td></tr></table></figure><p>返回前缀，若无则返回空</p><h4 id="addsuffix——加后缀函数"><a href="#addsuffix——加后缀函数" class="headerlink" title="addsuffix——加后缀函数"></a>addsuffix——加后缀函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">addsuffix</span> &lt;<span class="hljs-built_in">suffix</span>&gt;, &lt;names...&gt;)</span><br></code></pre></td></tr></table></figure><p>把后缀<code>suffix</code>加到<code>names</code>的每个单词后面</p><p>返回加了后缀的字符串</p><h4 id="addprefix——加前缀函数"><a href="#addprefix——加前缀函数" class="headerlink" title="addprefix——加前缀函数"></a>addprefix——加前缀函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">addprefix</span> &lt;prefix&gt;, &lt;names...&gt;)</span><br></code></pre></td></tr></table></figure><p>把前缀<code>prefix</code>加到<code>names</code>的每个单词前面</p><p>返回加了前缀的字符串</p><h4 id="join——连接函数"><a href="#join——连接函数" class="headerlink" title="join——连接函数"></a>join——连接函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">join</span> &lt;list1&gt;, &lt;list2&gt;)</span><br></code></pre></td></tr></table></figure><p>将<code>list2</code>对应连接到<code>list1</code>后面，若<code>list1</code>长，<code>list1</code>中多出来的保持原样，<code>list2</code>长，则复制到<code>list1</code>后面</p><p>返回连接后的字符串</p><h4 id="realpath——取真实路径函数"><a href="#realpath——取真实路径函数" class="headerlink" title="realpath——取真实路径函数"></a>realpath——取真实路径函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">realpath</span> names...)</span><br></code></pre></td></tr></table></figure><p>对<code>names</code>中的每个文件名，反会规范的绝对路径，规范名指的是不含<code>.</code>，<code>..</code>，也不包含任何重复路径，分隔符，符号链接</p><p>返回路径，失败返回空</p><h4 id="abspath——取绝对路径"><a href="#abspath——取绝对路径" class="headerlink" title="abspath——取绝对路径"></a>abspath——取绝对路径</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">abspath</span> names...)</span><br></code></pre></td></tr></table></figure><p>对<code>names</code>中的每个文件名，返回一个不含<code>.</code>，<code>..</code>的绝对路径，也不含重复路径，与<code>realpath</code>相比，<code>abspath</code>不解析符号链接，也不要求文件名<code>names</code>引用现有的文件或目录，使用通配符函数来测试函数是否存在，如果目标不存在，也返回绝对地址</p><p>返回绝对地址</p><h3 id="功能函数"><a href="#功能函数" class="headerlink" title="功能函数"></a>功能函数</h3><h4 id="foreach——循环遍历"><a href="#foreach——循环遍历" class="headerlink" title="foreach——循环遍历"></a>foreach——循环遍历</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">foreach</span> &lt;var&gt;, &lt;list&gt;, &lt;text&gt;)</span><br></code></pre></td></tr></table></figure><p>将<code>list</code>中的单词逐个放入<code>var</code>指定的变量中，然后执行<code>text</code>中的表达式，结果放入返回值中</p><div class="note note-info">            <p><code>var</code>是个临时变量，作用域只在<code>foreach</code>里</p>          </div><h4 id="if——条件判断"><a href="#if——条件判断" class="headerlink" title="if——条件判断"></a>if——条件判断</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">if</span> &lt;condition&gt;, &lt;then-part&gt;)</span><br><span class="hljs-variable">$(<span class="hljs-built_in">if</span> &lt;condition&gt;, &lt;then-part&gt;, &lt;else-part&gt;)</span><br></code></pre></td></tr></table></figure><p>判断<code>condition</code>，如果为真，执行<code>then-part</code>，否则，执行<code>else-part</code>（若存在）</p><h4 id="call——调用某函数"><a href="#call——调用某函数" class="headerlink" title="call——调用某函数"></a>call——调用某函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">call</span> &lt;expression&gt;, &lt;param1&gt;, &lt;param2&gt;, ..., &lt;paramn&gt;)</span><br></code></pre></td></tr></table></figure><p>唯一一个可以调用创建的新函数，<code>param*</code>会取代<code>expression</code>中的变量</p><p><code>call</code>处理参数时，第二个及之后的参数会保留空格</p><h4 id="origin——参数来源"><a href="#origin——参数来源" class="headerlink" title="origin——参数来源"></a>origin——参数来源</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">origin</span> &lt;variable&gt;)</span><br></code></pre></td></tr></table></figure><p>判断这个变量来自哪里</p><p>可能的返回值</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs makefile">undefined   <span class="hljs-comment">#未定义</span><br>default<span class="hljs-comment">#默认</span><br>environment<span class="hljs-comment">#环境变量，且-e没有打开</span><br>file<span class="hljs-comment">#该变量被定义在makefile中</span><br>command line<span class="hljs-comment">#命令行定义</span><br><span class="hljs-keyword">override</span><span class="hljs-comment">#该变量被重写</span><br>automatic<span class="hljs-comment">#该变量是一个自动化变量</span><br></code></pre></td></tr></table></figure><h4 id="shell——运行shell命令"><a href="#shell——运行shell命令" class="headerlink" title="shell——运行shell命令"></a>shell——运行shell命令</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">shell</span> &lt;func&gt; ...)</span><br></code></pre></td></tr></table></figure><p>与’&#96;’相同，其会启动一个子shell，然后运行命令，将结果赋给左边的变量</p><h4 id="error——报错函数"><a href="#error——报错函数" class="headerlink" title="error——报错函数"></a>error——报错函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">error</span> &lt;text...&gt;)</span><br></code></pre></td></tr></table></figure><p>产生一个致命错误，<code>text</code>是其输出信息</p><h4 id="warn——警告函数"><a href="#warn——警告函数" class="headerlink" title="warn——警告函数"></a>warn——警告函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(warn &lt;text...&gt;)</span><br></code></pre></td></tr></table></figure><p>产生一个警告，<code>text</code>是其输出信息</p><h4 id="eval——二次命令"><a href="#eval——二次命令" class="headerlink" title="eval——二次命令"></a>eval——二次命令</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(<span class="hljs-built_in">eval</span> sources:=foo.c bar.c)</span><br></code></pre></td></tr></table></figure><p>将文本直接放入make的解析器中</p><p>简单而言，<code>eval</code>会将后面的求值结果，当作make命令再执行一次</p><h2 id="条件指令"><a href="#条件指令" class="headerlink" title="条件指令"></a>条件指令</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-keyword">ifdef</span> variable-name<br><span class="hljs-keyword">ifndef</span> variable-name<br></code></pre></td></tr></table></figure><p>执行上述指令时，<code>variable-name</code>不需要用<code>$()</code>包裹</p><div class="note note-info">            <p>条件指令可以用于宏定义和命令脚本中</p>          </div><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-keyword">ifeq</span> test<br><span class="hljs-keyword">ifneq</span> test<br></code></pre></td></tr></table></figure><p><code>test</code>可以表示为<code>&quot;a&quot;</code> <code>&quot;b&quot;</code>或<code>(a, b)</code></p><div class="note note-info">            <p>这里的<code>test</code>有点微妙，如果采用<code>()</code>的形式，逗号comma后的空格会被忽略，逗号comma之前的会被保留</p>          </div><h2 id="引入指令"><a href="#引入指令" class="headerlink" title="引入指令"></a>引入指令</h2><p>也就是<code>include</code></p><p>引入指令流程：</p><ol><li>当make看到include时，首先对通配符及变量进行扩展，然后试着引入该文件</li><li>如果该文件存在，则流程继续，如果该文件不存在，make产生报告，并继续读取其余Makefile</li><li>当所有读取完成，make会从规则库中找出任何可用来更新引入文件的规则，如果找到了一个相符的规则，就更新工作目标，如果任何一个引入文件规则被更新，make会清除其内部数据，并重新引入该Makefile</li><li>如重复以上流程后，仍有引入文件不存在，则make报错</li></ol>]]></content>
    
    
    <categories>
      
      <category>脚本语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>脚本语言</tag>
      
      <tag>make</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>clangd配置</title>
    <link href="/2025/01/01/clangd/"/>
    <url>/2025/01/01/clangd/</url>
    
    <content type="html"><![CDATA[<h1 id="clangd"><a href="#clangd" class="headerlink" title="clangd"></a>clangd</h1><h2 id="安装clangd"><a href="#安装clangd" class="headerlink" title="安装clangd"></a>安装clangd</h2><h3 id="x86-64平台直接下载二进制"><a href="#x86-64平台直接下载二进制" class="headerlink" title="x86-64平台直接下载二进制"></a>x86-64平台直接下载二进制</h3><p>clangd的源码地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://github.com/clangd/clangd/tags<br></code></pre></td></tr></table></figure><p>选最新的下载即可</p><p>可以直接下载zip包，然后解压，将bin目录中的clangd放在&#x2F;usr&#x2F;bin&#x2F;下面，将lib目录下面的放在&#x2F;usr&#x2F;lib&#x2F;下面</p><h3 id="其他平台需要自己编译"><a href="#其他平台需要自己编译" class="headerlink" title="其他平台需要自己编译"></a>其他平台需要自己编译</h3><p>llvm-project编译方法：</p><ol><li>git地址</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/llvm/llvm-project.git<br></code></pre></td></tr></table></figure><ol start="2"><li>新建一个目录<code>build</code>，用来存放编译的文件，并进入该目录</li><li>使用cmake进行编译</li></ol><blockquote><p>这里的<code>$LLVM_ROOT</code>是该项目的安装目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake $LLVM_ROOT/llvm/ -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS=&quot;clang;clang-tools-extra&quot;<br></code></pre></td></tr></table></figure><ol start="4"><li>可以使用ninja来编译，会比make快n倍！！！</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在cmake中增加 -G Ninja</span><br></code></pre></td></tr></table></figure><ol start="5"><li>编译clangd</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake --build $LLVM_ROOT/build --target clangd<br></code></pre></td></tr></table></figure><ol start="6"><li>检查是否编译成功</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">check-clangd<br></code></pre></td></tr></table></figure><ol start="7"><li>在<code>build/bin</code>中即可发现clangd的二进制</li></ol><h2 id="安装llvm全家桶（仅限debian系）"><a href="#安装llvm全家桶（仅限debian系）" class="headerlink" title="安装llvm全家桶（仅限debian系）"></a>安装llvm全家桶（仅限debian系）</h2><p>添加llvm的官方源，可以从中安装最新的llvm和clang</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">wget https:<span class="hljs-comment">//apt.llvm.org/llvm.sh</span><br>chmod +x llvm.sh<br>sudo ./llvm.sh<br></code></pre></td></tr></table></figure><p>添加了新的软件源后，自由安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br>sudo apt install clang-18 libclang-18-dev<br>sudo apt install clang-format #按你想要安装的版本来，不加版本号的话，看你的发行版默认版本，Ubuntu20.04默认是10，22.04默认是14<br></code></pre></td></tr></table></figure><h2 id="vscode安装clangd插件"><a href="#vscode安装clangd插件" class="headerlink" title="vscode安装clangd插件"></a>vscode安装clangd插件</h2><p>直接在插件中搜索clangd，安装即可</p><p>还可以安装<code>clang-format</code>，也是直接插件安装即可</p><h2 id="配置clangd"><a href="#配置clangd" class="headerlink" title="配置clangd"></a>配置clangd</h2><h3 id="vscode的settings-json"><a href="#vscode的settings-json" class="headerlink" title="vscode的settings.json"></a>vscode的settings.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;files.exclude&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;**/.git&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;**/.svn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;**/.hg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;**/CVS&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;**/.DS_Store&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;**/Thumbs.db&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;**/*.a&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;**/*.o&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;**/*.cmd&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;**/*.order&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;**/arch/alpha&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/arc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/arm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/arm64&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/csky&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/h8300&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/hexagon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/ia64&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/m68k&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/microblaze&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/mips&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/nds32&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/nios2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/openrisc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/parisc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/powerpc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/riscv&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/s390&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/sh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/sparc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/um&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/x86&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;**/arch/xtensa&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;search.exclude&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;**/node_modules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/bower_components&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/*.code-search&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/alpha&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/arc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/arm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/arm64&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/csky&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/h8300&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/hexagon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/ia64&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/m68k&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/microblaze&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/mips&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/nds32&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/nios2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/openrisc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/parisc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/powerpc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/riscv&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/s390&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/sh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/sparc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/um&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/x86&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;**/arch/xtensa&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;C_Cpp.intelliSenseEngine&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;disabled&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;clangd.path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clangd&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;clangd.arguments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;--pretty&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">// 输出的 JSON 文件更美观</span><br>                <span class="hljs-string">&quot;--compile-commands-dir=$&#123;workspaceFolder&#125;/&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;--query-driver=$&#123;workspaceFolder&#125;/../toolchains/gcc-chushi-12.2.0-2023.06-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//指定编译器路径</span><br>                <span class="hljs-string">&quot;--log=verbose&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">// 让 Clangd 生成更详细的日志</span><br>                <span class="hljs-string">&quot;--background-index&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//后台分析并保存索引</span><br>             <span class="hljs-string">&quot;--all-scopes-completion&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 全局补全(补全建议会给出在当前作用域不可见的索引,插入后自动补充作用域标识符),例如在main()中直接写cout,即使没有`#include &lt;iostream&gt;`,也会给出`std::cout`的建议,配合&quot;--header-insertion=iwyu&quot;,还可自动插入缺失的头文件</span><br>             <span class="hljs-string">&quot;--clang-tidy&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 启用 Clang-Tidy 以提供「静态检查」</span><br>            <span class="hljs-string">&quot;--clang-tidy-checks=performance-*, bugprone-*, misc-*, google-*, modernize-*, readability-*, portability-*&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;--completion-parse=auto&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 当 clangd 准备就绪时，用它来分析建议</span><br>            <span class="hljs-string">&quot;--completion-style=detailed&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 建议风格：打包(重载函数只会给出一个建议);还可以设置为 detailed</span><br>            <span class="hljs-comment">// 启用配置文件(YAML格式)</span><br>        <span class="hljs-string">&quot;--enable-config&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;--fallback-style=Webkit&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 默认格式化风格: 在没找到 .clang-format 文件时采用,可用的有 LLVM, Google, Chromium, Mozilla, Webkit, Microsoft, GNU</span><br>        <span class="hljs-string">&quot;--function-arg-placeholders=true&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末</span><br>        <span class="hljs-string">&quot;--header-insertion-decorators&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分</span><br>        <span class="hljs-string">&quot;--header-insertion=iwyu&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 插入建议时自动引入头文件 iwyu</span><br>        <span class="hljs-string">&quot;--include-cleaner-stdlib&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 为标准库头文件启用清理功能(不成熟!!!)</span><br>            <span class="hljs-string">&quot;--pch-storage=memory&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// pch 优化的位置(Memory 或 Disk,前者会增加内存开销，但会提升性能)</span><br>            <span class="hljs-string">&quot;--ranking-model=decision_forest&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 建议的排序方案：hueristics (启发式), decision_forest (决策树)</span><br>        <span class="hljs-string">&quot;-j=12&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 同时开启的任务数量</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 找不到编译数据库(compile_flags.json 文件)时使用的编译器选项,这样的缺陷是不能直接索引同一项目的不同文件,只能分析系统头文件、当前文件和被include的文件</span><br>    <span class="hljs-attr">&quot;clangd.fallbackFlags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;-pedantic&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-Wall&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-Wextra&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-Wcast-align&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-Wdouble-promotion&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-Wformat=2&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-Wimplicit-fallthrough&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-Wmisleading-indentation&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-Wnon-virtual-dtor&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-Wnull-dereference&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-Wold-style-cast&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-Woverloaded-virtual&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-Wpedantic&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-Wshadow&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-Wunused&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-pthread&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-fuse-ld=lld&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-fsanitize=address&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-fsanitize=undefined&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;-stdlib=libc++&quot;</span><br>            <span class="hljs-comment">//这里可以包含额外的头文件路径</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;clangd.checkUpdates&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 自动检测 clangd 更新</span><br>    <span class="hljs-attr">&quot;clangd.onConfigChanged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;restart&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 重启 clangd 时重载配置,具体方法: F1 + Fn 打开命令面板，然后搜索“clangd: restart&quot;</span><br>    <span class="hljs-attr">&quot;clangd.serverCompletionRanking&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 借助网上的信息排序建议</span><br>    <span class="hljs-attr">&quot;clangd.detectExtensionConflicts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 当其它拓展与 clangd 冲突时警告并建议禁用</span><br>    <span class="hljs-attr">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// clangd的snippets有很多的跳转点，不用这个就必须手动触发Intellisense了</span><br>        <span class="hljs-attr">&quot;editor.formatOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;editor.formatOnType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;editor.formatOnPaste&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;clang-format.executable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/clang-format&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;files.associations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;*.h&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;c&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>注意的要点：</p><ol><li>编译时使用bear产生compile_commands.json文件，放在<code>--compile-commands-dir</code>指定的目录中。</li><li>使用cmake时，可以指定<code>cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1</code>来产生compile_commands.json。</li><li>将vscode中的c&#x2F;c++的智能补全禁用掉（或者就不要安装微软的c&#x2F;cpp扩展），即<code>&quot;C_Cpp.intelliSenseEngine&quot;: &quot;disabled&quot;</code></li></ol><h3 id="clangd的config-yaml"><a href="#clangd的config-yaml" class="headerlink" title="clangd的config.yaml"></a>clangd的config.yaml</h3><p>clangd的配置采用YAML格式，包括用户配置（全局）和项目配置</p><p>其中，用户配置在<code>~/.config/clangd/config.yaml</code>里面，项目配置在项目根目录的<code>.clangd</code>中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Diagnostics:</span> <span class="hljs-comment">#诊断</span><br>  <span class="hljs-attr">ClangTidy:</span><br>    <span class="hljs-attr">Add:</span> [<span class="hljs-string">&quot;*&quot;</span>]<br>    <span class="hljs-attr">Remove:</span><br>      [<br>        <span class="hljs-string">abseil*</span>,<br>        <span class="hljs-string">fuchsia*</span>,<br>        <span class="hljs-string">llvmlib*</span>,<br>        <span class="hljs-string">zircon*</span>,<br>        <span class="hljs-string">altera*</span>,<br>        <span class="hljs-string">google-readability-todo</span>,<br>        <span class="hljs-string">readability-braces-around-statements</span>,<br>        <span class="hljs-string">hicpp-braces-around-statements</span>,<br>        <span class="hljs-string">modernize-use-trailing-return-type</span>, <span class="hljs-comment"># 不要每个都加上尾返回值类型</span><br>        <span class="hljs-string">readability-identifier-length</span>, <span class="hljs-comment"># 不检查变量名长度</span><br>        <span class="hljs-string">cppcoreguidelines-avoid-magic-numbers</span>, <span class="hljs-comment"># 不检查魔法数字</span><br>        <span class="hljs-string">readability-magic-numbers</span>, <span class="hljs-comment">#同上</span><br>      ]<br><span class="hljs-attr">Index:</span> <span class="hljs-comment">#索引</span><br>  <span class="hljs-attr">Background:</span> <span class="hljs-string">Build</span><br><span class="hljs-attr">CompileFlags:</span> <span class="hljs-comment"># 编译选项</span><br>  <span class="hljs-attr">Add:</span> [<span class="hljs-string">-std=c++20</span>, <span class="hljs-string">-Wall</span>, <span class="hljs-string">-xc++</span>]<br>  <span class="hljs-comment"># Add里面也可以增加你想要包含的头文件路径</span><br>  <span class="hljs-attr">Compiler:</span> <span class="hljs-string">clang++</span><br></code></pre></td></tr></table></figure><h3 id="clang-format"><a href="#clang-format" class="headerlink" title="clang-format"></a>clang-format</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#基于那个配置文件</span><br><span class="hljs-attr">BasedOnStyle:</span> <span class="hljs-string">Google</span><br><span class="hljs-attr">Language:</span> <span class="hljs-string">Cpp</span><br><span class="hljs-comment"># 标准: Cpp03, Cpp11, Auto</span><br><span class="hljs-attr">Standard:</span> <span class="hljs-string">c++20</span><br><span class="hljs-attr">ColumnLimit:</span> <span class="hljs-number">120</span><br><span class="hljs-attr">BraceWrapping:</span><br>  <span class="hljs-comment"># case标签后面</span><br>  <span class="hljs-attr">AfterCaseLabel:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># class定义后面</span><br>  <span class="hljs-attr">AfterClass:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 控制语句后面</span><br>  <span class="hljs-attr">AfterControlStatement:</span> <span class="hljs-string">Never</span><br>  <span class="hljs-comment"># enum定义后面</span><br>  <span class="hljs-attr">AfterEnum:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 函数定义后面</span><br>  <span class="hljs-attr">AfterFunction:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 命名空间定义后面</span><br>  <span class="hljs-attr">AfterNamespace:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># ObjC定义后面</span><br>  <span class="hljs-attr">AfterObjCDeclaration:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># struct定义后面</span><br>  <span class="hljs-attr">AfterStruct:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># union定义后面</span><br>  <span class="hljs-attr">AfterUnion:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment">#ExternBlock定义后面</span><br>  <span class="hljs-attr">AfterExternBlock:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># catch之前</span><br>  <span class="hljs-attr">BeforeCatch:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># else之前</span><br>  <span class="hljs-attr">BeforeElse:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># lambda块之前</span><br>  <span class="hljs-attr">BeforeLambdaBody:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># while之前</span><br>  <span class="hljs-attr">BeforeWhile:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 缩进大括号</span><br>  <span class="hljs-attr">IndentBraces:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 分割空函数</span><br>  <span class="hljs-attr">SplitEmptyFunction:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 分割空记录</span><br>  <span class="hljs-attr">SplitEmptyRecord:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 分割空命名空间</span><br>  <span class="hljs-attr">SplitEmptyNamespace:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 在 @property 后面添加空格, \@property (readonly) 而不是 \@property(readonly).</span><br><span class="hljs-attr">ObjCSpaceAfterProperty:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 访问说明符(public、private等)的偏移</span><br><span class="hljs-attr">AccessModifierOffset:</span> <span class="hljs-number">-4</span><br><br><span class="hljs-comment"># 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)</span><br><span class="hljs-attr">AlignAfterOpenBracket:</span> <span class="hljs-string">Align</span><br><span class="hljs-comment"># 连续赋值时，对齐所有等号</span><br><span class="hljs-attr">AlignConsecutiveAssignments:</span> <span class="hljs-string">Consecutive</span><br><span class="hljs-comment"># 连续声明时，对齐所有声明的变量名</span><br><span class="hljs-attr">AlignConsecutiveDeclarations:</span> <span class="hljs-string">Consecutive</span><br><span class="hljs-comment"># 连续宏声明时，对齐空格 #clang-format-10 可用</span><br><span class="hljs-attr">AlignConsecutiveMacros:</span> <span class="hljs-string">Consecutive</span><br><span class="hljs-comment"># 对齐连接符: DontAlign(不对齐)， Left(左对齐), Right(右对齐)</span><br><span class="hljs-attr">AlignEscapedNewlines:</span> <span class="hljs-string">Left</span><br><span class="hljs-comment"># 水平对齐二元和三元表达式的操作数</span><br><span class="hljs-attr">AlignOperands:</span> <span class="hljs-string">Align</span><br><span class="hljs-comment"># 对齐连续的尾随的注释</span><br><span class="hljs-attr">AlignTrailingComments:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 允许函数调用的所有参数在放在下一行</span><br><span class="hljs-attr">AllowAllArgumentsOnNextLine:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 允许函数声明的所有参数在放在下一行</span><br><span class="hljs-attr">AllowAllParametersOfDeclarationOnNextLine:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 允许短的块放在同一行</span><br><span class="hljs-attr">AllowShortBlocksOnASingleLine:</span> <span class="hljs-string">Never</span><br><span class="hljs-comment"># 允许短的case标签放在同一行</span><br><span class="hljs-attr">AllowShortCaseLabelsOnASingleLine:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 允许短的枚举放在同一行</span><br><span class="hljs-attr">AllowShortEnumsOnASingleLine:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All</span><br><span class="hljs-attr">AllowShortFunctionsOnASingleLine:</span> <span class="hljs-string">None</span><br><span class="hljs-comment"># 允许短的if语句保持在同一行</span><br><span class="hljs-attr">AllowShortIfStatementsOnASingleLine:</span> <span class="hljs-string">Never</span><br><span class="hljs-comment"># 允许短的Lambdas语句保持在同一行</span><br><span class="hljs-attr">AllowShortLambdasOnASingleLine:</span> <span class="hljs-string">None</span><br><span class="hljs-comment"># 允许短的循环保持在同一行</span><br><span class="hljs-attr">AllowShortLoopsOnASingleLine:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 总是在定义返回类型后换行(deprecated)</span><br><span class="hljs-attr">AlwaysBreakAfterDefinitionReturnType:</span> <span class="hljs-string">None</span><br><span class="hljs-comment"># 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数),</span><br><span class="hljs-comment">#   AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)</span><br><span class="hljs-attr">AlwaysBreakAfterReturnType:</span> <span class="hljs-string">None</span><br><span class="hljs-comment"># 总是在多行string字面量前换行</span><br><span class="hljs-attr">AlwaysBreakBeforeMultilineStrings:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 总是在template声明后换行</span><br><span class="hljs-attr">AlwaysBreakTemplateDeclarations:</span> <span class="hljs-literal">Yes</span><br><span class="hljs-comment"># false表示函数实参要么都在同一行，要么都各自一行</span><br><span class="hljs-attr">BinPackArguments:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># false表示所有形参要么都在同一行，要么都各自一行</span><br><span class="hljs-attr">BinPackParameters:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效</span><br><span class="hljs-comment"># 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)</span><br><span class="hljs-attr">BreakBeforeBinaryOperators:</span> <span class="hljs-string">NonAssignment</span><br><span class="hljs-comment"># 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似),</span><br><span class="hljs-comment">#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似),</span><br><span class="hljs-comment">#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom</span><br><span class="hljs-comment">#   注：这里认为语句块也属于函数</span><br><span class="hljs-attr">BreakBeforeBraces:</span> <span class="hljs-string">Custom</span><br><span class="hljs-comment"># 在三元运算符前换行</span><br><span class="hljs-attr">BreakBeforeTernaryOperators:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 在构造函数的初始化列表的逗号前换行</span><br><span class="hljs-attr">BreakConstructorInitializersBeforeComma:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">BreakConstructorInitializers:</span> <span class="hljs-string">BeforeColon</span><br><span class="hljs-comment"># 在类声明继承列表的逗号前换行</span><br><span class="hljs-attr">BreakInheritanceList:</span> <span class="hljs-string">BeforeColon</span><br><span class="hljs-attr">BreakAfterJavaFieldAnnotations:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 允许中断长字符串</span><br><span class="hljs-attr">BreakStringLiterals:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变</span><br><span class="hljs-attr">CommentPragmas:</span> <span class="hljs-string">&#x27;^ IWYU pragma:&#x27;</span><br><span class="hljs-comment"># 允许连续的名称空间声明将在同一行</span><br><span class="hljs-attr">CompactNamespaces:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 构造函数的初始化列表的缩进宽度</span><br><span class="hljs-attr">ConstructorInitializerIndentWidth:</span> <span class="hljs-number">4</span><br><span class="hljs-comment"># 延续的行的缩进宽度</span><br><span class="hljs-attr">ContinuationIndentWidth:</span> <span class="hljs-number">4</span><br><span class="hljs-comment"># 去除C++11的列表初始化的大括号&#123;后和&#125;前的空格</span><br><span class="hljs-attr">Cpp11BracedListStyle:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 继承最常用的指针和引用的对齐方式</span><br><span class="hljs-attr">DerivePointerAlignment:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 关闭格式化</span><br><span class="hljs-attr">DisableFormat:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 修饰符后放置空行</span><br><span class="hljs-attr">EmptyLineAfterAccessModifier:</span> <span class="hljs-string">Never</span><br><span class="hljs-comment"># 修饰符前放置空行</span><br><span class="hljs-attr">EmptyLineBeforeAccessModifier:</span> <span class="hljs-string">LogicalBlock</span><br><span class="hljs-comment"># 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)</span><br><span class="hljs-attr">ExperimentalAutoDetectBinPacking:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 修正命名空间注释</span><br><span class="hljs-attr">FixNamespaceComments:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 需要被解读为foreach循环而不是函数调用的宏</span><br><span class="hljs-attr">ForEachMacros:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">foreach</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Q_FOREACH</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">BOOST_FOREACH</span><br><span class="hljs-comment"># 需要解读为if的函数</span><br><span class="hljs-attr">IfMacros:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">KJ_IF_MAYBE</span><br><span class="hljs-attr">IncludeBlocks:</span> <span class="hljs-string">Regroup</span><br><span class="hljs-comment"># 对#include进行排序，匹配了某正则表达式的#include拥有对应的优先级，匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前)，</span><br><span class="hljs-comment">#   可以定义负数优先级从而保证某些#include永远在最前面</span><br><span class="hljs-attr">IncludeCategories:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">Regex:</span> <span class="hljs-string">&#x27;^&lt;ext/.*\.h&gt;&#x27;</span><br>    <span class="hljs-attr">Priority:</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">SortPriority:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">CaseSensitive:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">Regex:</span> <span class="hljs-string">&#x27;^&lt;.*\.h&gt;&#x27;</span><br>    <span class="hljs-attr">Priority:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">SortPriority:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">CaseSensitive:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">Regex:</span> <span class="hljs-string">&#x27;^&lt;.*&#x27;</span><br>    <span class="hljs-attr">Priority:</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">SortPriority:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">CaseSensitive:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">Regex:</span> <span class="hljs-string">&#x27;.*&#x27;</span><br>    <span class="hljs-attr">Priority:</span> <span class="hljs-number">3</span><br>    <span class="hljs-attr">SortPriority:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">CaseSensitive:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># include块排序</span><br><span class="hljs-attr">IncludeIsMainRegex:</span> <span class="hljs-string">&#x27;([-_](test|unittest))?$&#x27;</span><br><span class="hljs-comment"># 缩进修饰符</span><br><span class="hljs-attr">IndentAccessModifiers:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 缩进case块</span><br><span class="hljs-attr">IndentCaseBlocks:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 缩进case标签</span><br><span class="hljs-attr">IndentCaseLabels:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 缩进goto标签</span><br><span class="hljs-attr">IndentGotoLabels:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 预处理缩进</span><br><span class="hljs-attr">IndentPPDirectives:</span> <span class="hljs-string">None</span><br><span class="hljs-comment"># 缩进extern块</span><br><span class="hljs-attr">IndentExternBlock:</span> <span class="hljs-string">AfterExternBlock</span><br><span class="hljs-comment"># 缩进宽度</span><br><span class="hljs-attr">IndentWidth:</span> <span class="hljs-number">4</span><br><span class="hljs-comment"># 函数返回类型换行时，缩进函数声明或函数定义的函数名</span><br><span class="hljs-attr">IndentWrappedFunctionNames:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 添加尾部注释</span><br><span class="hljs-attr">InsertTrailingCommas:</span> <span class="hljs-string">None</span><br><span class="hljs-comment"># 保留在块开始处的空行</span><br><span class="hljs-attr">KeepEmptyLinesAtTheStartOfBlocks:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># Lambda块缩进</span><br><span class="hljs-attr">LambdaBodyIndentation:</span> <span class="hljs-string">Signature</span><br><span class="hljs-comment"># 开始一个块的宏的正则表达式</span><br><span class="hljs-attr">MacroBlockBegin:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment"># 结束一个块的宏的正则表达式</span><br><span class="hljs-attr">MacroBlockEnd:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment"># 连续空行的最大数量</span><br><span class="hljs-attr">MaxEmptyLinesToKeep:</span> <span class="hljs-number">1</span><br><span class="hljs-comment"># 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All</span><br><span class="hljs-attr">NamespaceIndentation:</span> <span class="hljs-string">None</span><br><span class="hljs-comment"># 使用ObjC块时缩进宽度</span><br><span class="hljs-attr">ObjCBlockIndentWidth:</span> <span class="hljs-number">4</span><br><span class="hljs-comment"># 在ObjC的protocol列表前添加一个空格</span><br><span class="hljs-attr">ObjCSpaceBeforeProtocolList:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 使用的包构造函数初始化式样式</span><br><span class="hljs-attr">PackConstructorInitializers:</span> <span class="hljs-string">NextLine</span><br><span class="hljs-comment"># 在call(后对函数调用换行的penalty</span><br><span class="hljs-attr">PenaltyBreakBeforeFirstCallParameter:</span> <span class="hljs-number">19</span><br><span class="hljs-comment"># 在一个注释中引入换行的penalty</span><br><span class="hljs-attr">PenaltyBreakComment:</span> <span class="hljs-number">300</span><br><span class="hljs-comment"># 第一次在&lt;&lt;前换行的penalty</span><br><span class="hljs-attr">PenaltyBreakFirstLessLess:</span> <span class="hljs-number">120</span><br><span class="hljs-comment"># 在一个字符串字面量中引入换行的penalty</span><br><span class="hljs-attr">PenaltyBreakString:</span> <span class="hljs-number">1000</span><br><span class="hljs-comment"># 对于每个在行字符数限制之外的字符的penalty</span><br><span class="hljs-attr">PenaltyExcessCharacter:</span> <span class="hljs-number">1000000</span><br><span class="hljs-comment"># 将函数的返回类型放到它自己的行的penalty</span><br><span class="hljs-attr">PenaltyReturnTypeOnItsOwnLine:</span> <span class="hljs-number">200</span><br><span class="hljs-comment"># 指针和引用的对齐: Left, Right, Middle</span><br><span class="hljs-attr">PointerAlignment:</span> <span class="hljs-string">Left</span><br><span class="hljs-attr">PPIndentWidth:</span> <span class="hljs-number">-1</span><br><span class="hljs-attr">RawStringFormats:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">Language:</span> <span class="hljs-string">Cpp</span><br>    <span class="hljs-attr">Delimiters:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">cc</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">CC</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">cpp</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">Cpp</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">CPP</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;c++&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;C++&#x27;</span><br>    <span class="hljs-attr">CanonicalDelimiter:</span> <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-attr">BasedOnStyle:</span> <span class="hljs-string">google</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">Language:</span> <span class="hljs-string">TextProto</span><br>    <span class="hljs-attr">Delimiters:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">pb</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PB</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">proto</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PROTO</span><br>    <span class="hljs-attr">EnclosingFunctions:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">EqualsProto</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">EquivToProto</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PARSE_PARTIAL_TEXT_PROTO</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PARSE_TEST_PROTO</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PARSE_TEXT_PROTO</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ParseTextOrDie</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ParseTextProtoOrDie</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ParseTestProto</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ParsePartialTestProto</span><br>    <span class="hljs-attr">CanonicalDelimiter:</span> <span class="hljs-string">pb</span><br>    <span class="hljs-attr">BasedOnStyle:</span> <span class="hljs-string">google</span><br><span class="hljs-comment"># 引用对齐</span><br><span class="hljs-attr">ReferenceAlignment:</span> <span class="hljs-string">Pointer</span><br><span class="hljs-comment"># 允许重新排版注释</span><br><span class="hljs-attr">ReflowComments:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 允许排序#include</span><br><span class="hljs-attr">SortIncludes:</span> <span class="hljs-string">CaseSensitive</span><br><span class="hljs-comment"># 允许排序声明</span><br><span class="hljs-attr">SortUsingDeclarations:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 单独的定义块</span><br><span class="hljs-attr">SeparateDefinitionBlocks:</span> <span class="hljs-string">Always</span><br><span class="hljs-comment"># 在C风格类型转换后添加空格</span><br><span class="hljs-attr">SpaceAfterCStyleCast:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 在赋值运算符之前添加空格</span><br><span class="hljs-attr">SpaceBeforeAssignmentOperators:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 在逻辑非操作符之后插入一个空格</span><br><span class="hljs-attr">SpaceAfterLogicalNot:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 在&#x27; template &#x27;关键字之后会插入一个空格</span><br><span class="hljs-attr">SpaceAfterTemplateKeyword:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 在用于初始化对象的c++ 11带括号的列表之前(在前面的标识符或类型之后)将插入一个空格</span><br><span class="hljs-attr">SpaceBeforeCpp11BracedList:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 构造函数初始化式冒号前的空格将被删除</span><br><span class="hljs-attr">SpaceBeforeCtorInitializerColon:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 在继承冒号前添加空格</span><br><span class="hljs-attr">SpaceBeforeInheritanceColon:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 控制括号前的单独空格。</span><br><span class="hljs-attr">SpaceBeforeParens:</span> <span class="hljs-string">ControlStatements</span><br><span class="hljs-comment"># 开圆括号之前添加一个空格</span><br><span class="hljs-attr">SpaceBeforeParensOptions:</span><br>  <span class="hljs-attr">AfterControlStatements:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">AfterForeachMacros:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">AfterFunctionDefinitionName:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">AfterFunctionDeclarationName:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">AfterIfMacros:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">AfterOverloadedOperator:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">BeforeNonEmptyParentheses:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 在空的圆括号中添加空格</span><br><span class="hljs-attr">SpaceInEmptyParentheses:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 在基于冒号的范围循环之前 添加空格</span><br><span class="hljs-attr">SpaceBeforeRangeBasedForLoopColon:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 在尾随的评论前添加的空格数(只适用于//)</span><br><span class="hljs-attr">SpacesBeforeTrailingComments:</span> <span class="hljs-number">2</span><br><span class="hljs-comment"># 在尖括号的&lt;后和&gt;前添加空格</span><br><span class="hljs-attr">SpacesInAngles:</span> <span class="hljs-string">Never</span><br><span class="hljs-comment"># 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格</span><br><span class="hljs-attr">SpacesInContainerLiterals:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 在C风格类型转换的括号中添加空格</span><br><span class="hljs-attr">SpacesInCStyleCastParentheses:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 在圆括号的(后和)前添加空格</span><br><span class="hljs-attr">SpacesInParentheses:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响</span><br><span class="hljs-attr">SpacesInSquareBrackets:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># tab宽度</span><br><span class="hljs-attr">TabWidth:</span> <span class="hljs-number">4</span><br><span class="hljs-comment"># 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always</span><br><span class="hljs-attr">UseTab:</span> <span class="hljs-string">Always</span><br><span class="hljs-attr">DeriveLineEnding:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">UseCRLF:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">WhitespaceSensitiveMacros:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">STRINGIZE</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">PP_STRINGIZE</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">BOOST_PP_STRINGIZE</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">NS_SWIFT_NAME</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">CF_SWIFT_NAME</span><br><br></code></pre></td></tr></table></figure><h2 id="使用Clang编译linux内核"><a href="#使用Clang编译linux内核" class="headerlink" title="使用Clang编译linux内核"></a>使用Clang编译linux内核</h2><h3 id="直接编译"><a href="#直接编译" class="headerlink" title="直接编译"></a>直接编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">make CC=clang defconfig<br>make CC=clang<br></code></pre></td></tr></table></figure><h3 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make CC=clang ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-<br></code></pre></td></tr></table></figure><h2 id="使用LLVM编译"><a href="#使用LLVM编译" class="headerlink" title="使用LLVM编译"></a>使用LLVM编译</h2><h3 id="直接编译-1"><a href="#直接编译-1" class="headerlink" title="直接编译"></a>直接编译</h3><p>编译时指定llvm为编译工具链</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make CC=clang LD=ld.lld AR=llvm-ar NM=llvm-nm STRIP=llvm-strip \ OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump READELF=llvm-readelf HOSTCC=clang HOSTCXX=clang++ HOSTAR=llvm-ar HOSTLD=ld.lld<br></code></pre></td></tr></table></figure><p>或者直接使用kbuild的简单编译法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make LLVM=1<br></code></pre></td></tr></table></figure><p>如果你的LLVM工具链不在系统路径里面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make LLVM=/path/to/llvm/<br></code></pre></td></tr></table></figure><p>如果你想直接使用某个版本的LLVM，这将直接使用clang-18等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make LLVM=-18<br></code></pre></td></tr></table></figure><h3 id="交叉编译-1"><a href="#交叉编译-1" class="headerlink" title="交叉编译"></a>交叉编译</h3><p> <code>CROSS_COMPILE</code>用来指定交叉编译器，如果在LLVM中没有指定<code>CROSS_COMPILE</code>，那么会使用<code>ARCH</code>来寻找，即，如果你仅使用LLVM工具，<code>CROSS_COMPILE</code>是不必要的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make ARCH=arm64 LLVM=1<br></code></pre></td></tr></table></figure><p>如果需要禁止clang自身的汇编器，可以使用<code>LLVM_IAS=0</code>，此时的<code>CROSS_COMPILE</code>是不可缺少的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make ARCH=arm64 LLVM=1 LLVM_IAS=0 CROSS_COMPILE=arm64-linux-gnu-<br></code></pre></td></tr></table></figure><h2 id="维护符号链接"><a href="#维护符号链接" class="headerlink" title="维护符号链接"></a>维护符号链接</h2><p>由于使用llvm.sh安装的llvm全家桶只有具体的版本，而不是一个通用的符号链接，因此需要自己维护这个关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 定义要管理的LLVM工具</span><br>llvm_tools=(<br>    <span class="hljs-string">&quot;clang&quot;</span> <span class="hljs-string">&quot;clang++&quot;</span> <span class="hljs-string">&quot;clangd&quot;</span> <span class="hljs-string">&quot;clang-format&quot;</span> <span class="hljs-string">&quot;clang-tidy&quot;</span><br>    <span class="hljs-string">&quot;llvm-ar&quot;</span> <span class="hljs-string">&quot;llvm-as&quot;</span> <span class="hljs-string">&quot;llvm-bcanalyzer&quot;</span> <span class="hljs-string">&quot;llvm-cat&quot;</span> <span class="hljs-string">&quot;llvm-config&quot;</span> <br>    <span class="hljs-string">&quot;llvm-cov&quot;</span> <span class="hljs-string">&quot;llvm-cxxfilt&quot;</span> <span class="hljs-string">&quot;llvm-diff&quot;</span> <span class="hljs-string">&quot;llvm-dis&quot;</span> <span class="hljs-string">&quot;llvm-dwarfdump&quot;</span><br>    <span class="hljs-string">&quot;llvm-extract&quot;</span> <span class="hljs-string">&quot;llvm-link&quot;</span> <span class="hljs-string">&quot;llvm-lto&quot;</span> <span class="hljs-string">&quot;llvm-mc&quot;</span> <span class="hljs-string">&quot;llvm-nm&quot;</span><br>    <span class="hljs-string">&quot;llvm-objcopy&quot;</span> <span class="hljs-string">&quot;llvm-objdump&quot;</span> <span class="hljs-string">&quot;llvm-opt-report&quot;</span> <span class="hljs-string">&quot;llvm-profdata&quot;</span><br>    <span class="hljs-string">&quot;llvm-ranlib&quot;</span> <span class="hljs-string">&quot;llvm-readelf&quot;</span> <span class="hljs-string">&quot;llvm-readobj&quot;</span> <span class="hljs-string">&quot;llvm-rtdyld&quot;</span><br>    <span class="hljs-string">&quot;llvm-size&quot;</span> <span class="hljs-string">&quot;llvm-strings&quot;</span> <span class="hljs-string">&quot;llvm-strip&quot;</span> <span class="hljs-string">&quot;llvm-symbolizer&quot;</span><br>    <span class="hljs-string">&quot;llvm-tblgen&quot;</span> <span class="hljs-string">&quot;lld&quot;</span> <span class="hljs-string">&quot;ld.lld&quot;</span><br>)<br><br><span class="hljs-comment"># 查找最新的LLVM工具</span><br><span class="hljs-function"><span class="hljs-title">find_latest_llvm</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> tool_name=<span class="hljs-variable">$1</span><br>    <span class="hljs-comment"># 使用find命令查找所有的可执行文件</span><br>    <span class="hljs-built_in">local</span> versions=$(find /usr/bin -name <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tool_name&#125;</span>-*&quot;</span> | grep -oE <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tool_name&#125;</span>-[0-9\.]+&quot;</span> | <span class="hljs-built_in">sort</span> -V | <span class="hljs-built_in">tail</span> -1)<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/usr/bin/<span class="hljs-variable">$&#123;versions&#125;</span>&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 更新update-alternatives</span><br><span class="hljs-function"><span class="hljs-title">update_alternatives</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> tool_name=<span class="hljs-variable">$1</span><br>    <span class="hljs-built_in">local</span> latest_tool_path=$(find_latest_llvm <span class="hljs-variable">$&#123;tool_name&#125;</span>)<br>    <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$latest_tool_path</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;未找到<span class="hljs-variable">$&#123;tool_name&#125;</span>的版本，跳过。&quot;</span><br>        <span class="hljs-built_in">return</span><br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-comment"># 使用update-alternatives进行更新</span><br>    <span class="hljs-built_in">sudo</span> update-alternatives --install /usr/bin/<span class="hljs-variable">$&#123;tool_name&#125;</span> <span class="hljs-variable">$&#123;tool_name&#125;</span> <span class="hljs-variable">$&#123;latest_tool_path&#125;</span> 100<br>    <span class="hljs-built_in">sudo</span> update-alternatives --<span class="hljs-built_in">set</span> <span class="hljs-variable">$&#123;tool_name&#125;</span> <span class="hljs-variable">$&#123;latest_tool_path&#125;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tool_name&#125;</span>已更新为<span class="hljs-variable">$&#123;latest_tool_path&#125;</span>&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 遍历所有的LLVM工具并更新</span><br><span class="hljs-keyword">for</span> tool <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;llvm_tools[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>    update_alternatives <span class="hljs-variable">$&#123;tool&#125;</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;所有LLVM工具均已更新完毕。&quot;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>嵌入式</tag>
      
      <tag>工具</tag>
      
      <tag>clangd</tag>
      
      <tag>clang-format</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker安装配置</title>
    <link href="/2025/01/01/docker/"/>
    <url>/2025/01/01/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>将清华源放入apt目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sS https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [arch=<span class="hljs-subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-ce.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu <span class="hljs-subst">$(lsb_release -sc)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list<br></code></pre></td></tr></table></figure><p>安装docker ce和docker compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin<br></code></pre></td></tr></table></figure><p>查看是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker version<br></code></pre></td></tr></table></figure><h2 id="配置镜像源"><a href="#配置镜像源" class="headerlink" title="配置镜像源"></a>配置镜像源</h2><p>国内的都屏蔽了，但是俄罗斯好兄弟的可以用QWQ</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/docker<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>        <span class="hljs-string">&quot;https://docker.m.daocloud.io&quot;</span>,<br>        <span class="hljs-string">&quot;https://huecker.io&quot;</span>,<br>        <span class="hljs-string">&quot;https://dockerhub.timeweb.cloud&quot;</span>,<br>        <span class="hljs-string">&quot;https://noohub.ru&quot;</span><br>    ]<br>&#125;<br>EOF<br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="镜像导入-导出"><a href="#镜像导入-导出" class="headerlink" title="镜像导入&#x2F;导出"></a>镜像导入&#x2F;导出</h2><p>可能你在服务器上不可以直接重启docker服务，那么你可以在本地下载镜像，然后导出为tar包，上传到服务器后，再导入</p><h3 id="从容器导入-导出"><a href="#从容器导入-导出" class="headerlink" title="从容器导入&#x2F;导出"></a>从容器导入&#x2F;导出</h3><p>查看容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps -a<br></code></pre></td></tr></table></figure><p>导出为镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">export</span> 容器ID &gt; image.tar<br></code></pre></td></tr></table></figure><p>导入镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker import 容器名 &lt; image.tar<br></code></pre></td></tr></table></figure><p>查看是否导入成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h3 id="从镜像导入-导出"><a href="#从镜像导入-导出" class="headerlink" title="从镜像导入&#x2F;导出"></a>从镜像导入&#x2F;导出</h3><p>查看镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><p>导出镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker save 镜像ID &gt; image.tar<br></code></pre></td></tr></table></figure><p>或者一次性导出多个镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker save -o images.tar 镜像1 镜像2 ...<br></code></pre></td></tr></table></figure><p>导入镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker load &lt; image.tar<br></code></pre></td></tr></table></figure><h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><p>查看镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><p>下载镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull 镜像名:tag<br></code></pre></td></tr></table></figure><p>由镜像运行一个容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run [option] <span class="hljs-built_in">command</span> [args]<br><span class="hljs-comment"># -i 交互式shell</span><br><span class="hljs-comment"># -t 启用tty</span><br><span class="hljs-comment"># -d detach，后台运行docker容器</span><br><span class="hljs-comment"># -u 指定用户</span><br><span class="hljs-comment"># -p 用户密码</span><br><span class="hljs-comment"># -v /path/to/host:/path/to/docker:authority 映射主机目录到docker容器目录</span><br><span class="hljs-comment"># --workdir string  指定工作目录</span><br><span class="hljs-comment"># -p 10290:22指定映射的端口</span><br><span class="hljs-comment"># --privileged  是否有特权</span><br></code></pre></td></tr></table></figure><p>删除镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker rmi 镜像名:tag<br></code></pre></td></tr></table></figure><p>重命名镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker tag IMAGEID REPOSITORY:TAG<br></code></pre></td></tr></table></figure><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><p>查看所有容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><p>进入一个已存在的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span><br></code></pre></td></tr></table></figure><p>启动&#x2F;停止容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start/stop 容器名<br></code></pre></td></tr></table></figure><p>删除容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">rm</span> 容器名<br></code></pre></td></tr></table></figure><h2 id="vscode远程连接"><a href="#vscode远程连接" class="headerlink" title="vscode远程连接"></a>vscode远程连接</h2><p>首先docker要进行端口映射，然后安装ssh服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">//将宿主机的端口映射到容器中<br>docker run -itd -p 10290:22<br><br>//安装ssh<br>apt-get install openssh-server <br>apt-get install openssh-client <br>apt-get install ssh<br><br><br>//开放ssh端口<br>vim /etc/ssh/sshd_config<br>Port 22<br><br>//开启服务<br>/etc/init.d/ssh restart<br><br>//服务自启动，每次登录start 容器自动打开ssh<br><span class="hljs-comment"># 找到并打开文件/root/.bashrc</span><br>$ vim /root/.bashrc<br><span class="hljs-comment"># 在.bashrc末尾添加如下代码</span><br>$ service ssh start<br><br><br>//在vscode中直接远程连接服务器中打开的docker容器，这样就可以直接在容器的环境中使用vscode插件了，例如clangd<br>//注意给登录用户创建家目录，用于保存vscode缓存<br>ssh -p 10290 镜像中的用户名@服务器地址<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>嵌入式</tag>
      
      <tag>工具</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell语言详解</title>
    <link href="/2025/01/01/shell/"/>
    <url>/2025/01/01/shell/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="变量tips"><a href="#变量tips" class="headerlink" title="变量tips"></a>变量tips</h2><ul><li><p>定义变量时，等号周围不能有空格；</p></li><li><p>定义变量中不能有空格；</p></li><li><p>变量使用时，前面要加$；</p></li><li><p>建议使用变量时将变量用花括号括起来；</p></li><li><p>只读变量可以在变量前加readonly</p><ul><li><pre><code class="language-shell">#!/bin/bashmyUrl=&quot;https://www.google.com&quot;readonly myUrl</code></pre></li></ul></li><li><p>删除变量可以使用unset，变量被删除后不能再次使用，unset不能删除只读变量；</p></li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li><p>单引号字符串里任何字符都会原样输出，单引号字符串中变量是无效的；</p></li><li><p>单引号字符串中不能出现单独的一个单引号，加转义字符也不行；</p></li><li><p>双引号里可以有变量；</p></li><li><p>双引号里可以出现转义字符；</p></li><li><p>获取字符串长度<code>string=&quot;abcd&quot;</code> <code>echo $&#123;#string&#125;</code>,即表示变量的<code>$</code>符号后加一个<code>#</code></p></li><li><p>提取子字符串</p><ul><li><pre><code class="language-shell">string=&quot;runoob is a great site&quot;echo $&#123;string:1:4&#125; # 输出 unoo</code></pre></li></ul></li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>数组元素间用空格分割；</li><li>取数组元素<code>$&#123;数组名[下标]&#125;</code>；</li><li>取数组所有元素<code>$&#123;数组名[@]&#125;</code>；</li><li>获取数组长度<code>$&#123;#数组名[@]&#125;</code>；</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p><code>#</code>表示注释；</p></li><li><pre><code class="language-shell">#多行注释:&lt;&lt;EOF注释内容。。。EOF##或者:&lt;&lt;&#39;...&#39;##或者:&lt;&lt;!...!</code></pre></li></ul><h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><ul><li><p>向脚本传递参数，脚本内使用的格式为<code>$n</code>，n代表第几个参数，<code>$1</code>表示第一个参数；</p></li><li><p><code>$0</code>表示执行的文件名，包含文件路径；</p></li><li><p><code>$#</code>表示传递到脚本参数的个数；</p></li><li><p><code>$*</code>以一个单字符串的形式显示所有向脚本传递的参数；</p></li><li><p><code>$$</code>脚本运行的当前进程的ID号；</p></li><li><p><code>$!</code>后台运行的最后一个进程的ID号；</p></li><li><p><code>$@</code>与<code>$*</code>相同，但是使用时加引号，并在引号中返回每个参数(不是单字符串了)</p><ul><li>如<code>使用&quot;$@&quot;则返回&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot;</code></li></ul></li><li><p><code>$-</code>显示Shell使用的当前选项；</p></li><li><p><code>$?</code>显示最后命令的退出状态；</p></li></ul><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><ul><li><p>要进行数学运算，需要使用斜点<code>val=expr 2 + 2</code></p></li><li><p>表达式和运算符之间要有空格，这点要区分变量赋值，变量赋值等号周围不能加空格；</p></li><li><p>方括号[ ]等价与test，方括号周边要加空格；</p></li><li><p>乘号前面必须要加反斜杠<code>[ $a \* $b ]</code>；</p></li><li><p>布尔运算：</p><ul><li><code>!</code>取非；</li><li><code>-o</code>取或；</li><li><code>-a</code>取与；</li></ul></li><li><p>逻辑运算：</p><ul><li><code>&amp;&amp;</code>逻辑与；</li><li><code>||</code>逻辑或；</li></ul></li><li><p>字符串运算：</p><ul><li><code>=</code>检查字符串相等；</li><li><code>!=</code>检查字符串不等；</li><li><code>-z</code>检查字符串长度是否为0，为0返回true；</li><li><code>-n</code>检查字符串是否不为0，不为0返回true；</li><li><code>$</code>检测字符串是否为空，不为空返回true；</li></ul></li><li><p>文件测试：</p><ul><li><code>-b file</code>检查文件是否为块设备，是则返回true；</li><li><code>-c file</code>检查文件是否是字符设备，是则返回true；</li><li><code>-d file</code>检查文件是否是目录，是则返回true；</li><li><code>-f file</code>检查文件是否是普通文件，是则返回true；</li><li><code>-g file</code>检查文件是否设置了SGID位，是则返回true；</li><li><code>-k file</code>检查文件是否设置了粘着位sticky bit，是则返回true；</li><li><code>-p file</code>检查文件是否是有名管道，是则返回true；</li><li><code>-u file</code>检查文件是否设置了SUID位，是则返回true；</li><li><code>-r file</code>检查文件是否可读，是则返回true；</li><li><code>-w file</code>检查文件是否可写，是则返回true；</li><li><code>-x file</code>检查文件是否可执行，是则返回true；</li><li><code>-s file</code>检查文件是否为空(文件大小是否大于0)，不为空则返回true；</li><li><code>-e file</code>检测文件(包括目录)是否存在，是则返回true；</li><li><code>-S</code>判断文件是否是socket；</li><li><code>-L</code>检测文件是否存在合并是一个符号链接；</li></ul></li></ul><h2 id="命令行展开"><a href="#命令行展开" class="headerlink" title="命令行展开"></a>命令行展开</h2><p><code>&#123;&#125;</code>会在脚本中展开表达式，<code>..</code>表示递归，第三位表示步长</p><p> 如：</p><p><code>&#123;1..5&#125;</code>展开就是<code>1 2 3 4 5</code></p><p><code>&#123;1..5..2&#125;</code>展开就是<code>1 3 5</code></p><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p><code>alias</code>为某命令产生一个别名</p><p><code>unalias</code>取消这个别名</p><h2 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h2><p><code>history</code>会展示之前的历史命令，命令前有编号</p><p><code>&#123;!num&#125;</code>运行history中对应数字的命令</p><p><code>&#123;!!&#125;</code>运行上一条命令</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p><code>^</code>表示<code>CTRL</code>键</p><p><code>^A</code>移动光标到行首</p><p><code>^E</code>移动光标到行尾</p><p><code>^U</code>剪切这一行</p><p><code>^K</code>剪切光标之后的所有内容</p><p><code>^Y</code>粘贴之前剪切的内容</p><p><code>^L</code>等同于clear，清屏</p><p><code>^D</code>退出当前程序，正常退出</p><p><code>^C</code>退出当前程序，非正常退出</p><p><code>^Z</code>暂停（挂起）当前程序，并放入后台</p><p><code>^S</code>暂停屏幕输出</p><p><code>^Q</code>恢复屏幕输出</p><p><code>^R</code>在历史命令中搜索</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><h4 id="基本正则字符"><a href="#基本正则字符" class="headerlink" title="基本正则字符"></a>基本正则字符</h4><p><code>^</code>：行首</p><p><code>$</code>：行尾</p><p><code>[]</code>：选字，如<code>[abc]</code>则为abc中的任意一个，还可以范围匹配<code>[a-c]</code>，表示abc</p><p><code>*</code>：任意字符，包括空，出现任意次</p><p><code>.</code>：任意一个字符（非换行），有且只有一个</p><h4 id="扩展正则字符"><a href="#扩展正则字符" class="headerlink" title="扩展正则字符"></a>扩展正则字符</h4><p><code>()</code>：分组，被其包裹的部分是一个整体，并获取这个匹配，可以在后面使用</p><p><code>&#123;&#125;</code>：匹配前一个分组的某些次数</p><p><code>?</code>：前一个字符的零次或一次，若前面是一个限制符时，匹配模式是非贪婪的（即尽可能匹配少的字符）</p><p><code>+</code>：前面一个字符的一次及以上</p><p><code>|</code>：表示或者，同时过滤多个字符串</p><p><code>\</code>：转义字符（escape char），跟在其后的，表示其字符本身含义，而不是其正则含义，或者将普通字符转义为特殊字符</p><p><code>\b</code>：匹配一个单词边界，也就是单词和空格间的位置</p><p><code>\B</code>：匹配非单词边界</p><p><code>\cx</code>：匹配由x指明的控制字符，如<code>\cM</code>匹配<code>^M</code>，x必须是字母</p><p><code>\d</code>：匹配一个数字</p><p><code>\D</code>：匹配一个非数字</p><p><code>\f</code>：匹配一个换页符，等价于<code>\x0c</code>和<code>\cL</code></p><p><code>\n</code>：匹配一个换行符，等价于<code>\x0a</code>和<code>\cJ</code></p><p><code>\r</code>：匹配一个回车符，等价于<code>\x0d</code>和<code>\cM</code></p><p><code>\s</code>：匹配一个空白字符，包括空格，制表，换页等</p><p><code>\S</code>：匹配任何非空白符</p><p><code>\t</code>：匹配一个制表符</p><p><code>\v</code>：匹配一个垂直制表符</p><p><code>\w</code>：匹配字母，数字，下划线（如c语言中合法的变量名）</p><p><code>\W</code>：匹配非字母，数字，下划线</p><p><code>\xn</code>：匹配n，其中n是16进制转义值，必须为两个字符</p><p><code>\num</code>：匹配num，其中num是一个正整数，是对所获取的匹配的引用，如<code>(.)\1</code>匹配两个连续的相同字符</p><p><code>\n</code>：n是一个数字，标识一个8进制转义值或一个向后引用。如果<code>\n</code>之前有至少n个获取的子表达式，则n为向后引用，否则，如果n为八进制数字，则n为一个八进制转义值</p><p><code>\nm</code>：n，m都是一个数字，标识一个八进制转义值，或者一个向后引用，最多到99</p><p><code>\nml</code>：匹配八进制数字，如<code>n</code>为<code>0-3</code>，<code>m</code>和<code>l</code>为<code>0-7</code>，则匹配八进制转义值<code>nml</code></p><p><code>\un</code>：匹配n，其中n是四个16进制数字表示的Unicode字符，如<code>\u00A9</code>表示<code>？</code></p><h4 id="组合字符"><a href="#组合字符" class="headerlink" title="组合字符"></a>组合字符</h4><p><code>^$</code>：表示空行（啥也没有）</p><p><code>.*</code>：匹配至少一个的所有内容，没有空</p><p><code>^.*</code>：匹配任意多个字符开头</p><p><code>.*$</code>：匹配任意多个字符结尾</p><p><code>[^abc]</code>：反选，匹配非abc的任意字符</p><p><code>a&#123;n, m&#125;</code>：匹配前一个分组的至少n次，至多m次，如<code>a&#123;1, 3&#125;</code>，匹配 <code>a</code>，<code>aa</code>，<code>aaa</code></p><p><code>a&#123;n, &#125;</code>：匹配前一个分组的至少n次，至多不限</p><p><code>a&#123;, m&#125;</code>：匹配前一个分组的至多m次，至少不限</p><p><code>a&#123;n&#125;</code>：匹配前一个分组正好n次</p><p><code>(?:pattern)</code>：匹配，但不获取这个匹配结果</p><p><code>(?=pattern)</code>：正向肯定预查，在任何匹配pattern的字符串处匹配查找字符串</p><p><code>(?!pattern)</code>：正向否定预查，在任何不匹配pattern的字符串处匹配查找字符串</p><p><code>(?&lt;=pattern)</code>：反向肯定预查，在任何匹配pattern的字符串处匹配查找字符串，方向和正向相反</p><p><code>(?&lt;!pattern)</code>：反向否定预查，在任何不匹配pattern的字符串处匹配查找字符串，方向和正向相反</p><p><code>[]+</code>：方括号内的内容的一次或多次</p><p><code>&lt;&gt;</code>：定位单词的左侧和右侧</p><h4 id="字符簇"><a href="#字符簇" class="headerlink" title="字符簇"></a>字符簇</h4><p><code>[[:alpha:]]</code>：任何字母</p><p><code>[[:digit:]]</code>：任何数字</p><p><code>[[:alnum:]]</code>：任何字母和数字</p><p><code>[[:space:]]</code>：任何空白字符</p><p><code>[[:upper:]]</code>：任何大写字母</p><p><code>[[:lower:]]</code>：任何小写字母</p><p><code>[[:punct:]]</code>：任何标点符号</p><p><code>[[:xdigit:]]</code>：任何16进制的数字</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>相同优先级的从左到右运算，不同优先级的先高后低</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>\</code></td><td align="center">转义符</td></tr><tr><td align="center"><code>(), (?:), (?=), []</code></td><td align="center">圆括号与方括号</td></tr><tr><td align="center"><code>*, +, ?, &#123;n&#125;, &#123;n,&#125;,&#123;n,m&#125;,&#123;,m&#125;</code></td><td align="center">限定符</td></tr><tr><td align="center"><code>^, $, \任何元字符、任何字符</code></td><td align="center">定位点和序列</td></tr><tr><td align="center">&#96;</td><td align="center">&#96;</td></tr></tbody></table><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p><code>i</code>：忽略大小写</p><p><code>g</code>：全局匹配</p><p><code>m</code>：多行匹配</p><p><code>s</code>：<code>.</code>中包含换行<code>\n</code></p>]]></content>
    
    
    <categories>
      
      <category>脚本语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>脚本语言</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zsh安装配置</title>
    <link href="/2025/01/01/zsh/"/>
    <url>/2025/01/01/zsh/</url>
    
    <content type="html"><![CDATA[<h1 id="zsh配置"><a href="#zsh配置" class="headerlink" title="zsh配置"></a>zsh配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>安装zsh</li></ol><p>debian系：</p><p><code>sudo apt install zsh</code></p><p>arch linux系：</p><p><code>sudo pacman -S zsh</code></p><p>Fedora系：</p><p><code>sudo dnf install zsh</code></p><ol start="2"><li>设置为默认shell</li></ol><p><code>chsh -s /bin/zsh</code></p><ol start="3"><li>安装oh-my-zsh</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>安装p10k</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">github源</span><br>git clone https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k<br><span class="hljs-meta prompt_"># </span><span class="language-bash">国内源</span><br>git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k<br></code></pre></td></tr></table></figure><ol start="5"><li>将p10k设置为默认主题</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;/^ZSH_THEME=/c\ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;&#x27; ~/.zshrc<br></code></pre></td></tr></table></figure><ol start="6"><li>配置高亮，自动提示，补全</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting<br>git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions<br>git clone https://github.com/zsh-users/zsh-completions $ZSH_CUSTOM/plugins/zsh-completions<br></code></pre></td></tr></table></figure><ol start="7"><li>将配置写入.zshrc中</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">! grep -q &quot;autoload -U compinit &amp;&amp; compinit&quot; ~/.zshrc &amp;&amp; echo &quot;autoload -U compinit &amp;&amp; compinit&quot; &gt;&gt; ~/.zshrc<br>sed -i &#x27;/^plugins=/c\plugins=(git sudo z zsh-syntax-highlighting zsh-autosuggestions zsh-completions)&#x27; ~/.zshrc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>嵌入式</tag>
      
      <tag>工具</tag>
      
      <tag>zsh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何为社区提交patch</title>
    <link href="/2025/01/01/%E5%A6%82%E4%BD%95%E4%B8%BA%E7%A4%BE%E5%8C%BA%E6%8F%90%E4%BA%A4patch/"/>
    <url>/2025/01/01/%E5%A6%82%E4%BD%95%E4%B8%BA%E7%A4%BE%E5%8C%BA%E6%8F%90%E4%BA%A4patch/</url>
    
    <content type="html"><![CDATA[<h1 id="为Linux社区提交patch"><a href="#为Linux社区提交patch" class="headerlink" title="为Linux社区提交patch"></a>为Linux社区提交patch</h1><h2 id="描述patch更改"><a href="#描述patch更改" class="headerlink" title="描述patch更改"></a>描述patch更改</h2><p><strong>提出问题</strong>：首先阐述你的patch要解决的问题，无论是一行的代码bug修复或者增加5000+行的新特性。</p><p>注意查看优化和平衡，最优往往都是有代价的。</p><p><strong>描述技术细节</strong>：一旦问题建立，那么就需要详细描述你的技术细节。</p><p><strong>每一个patch仅解决一个问题</strong>：当你的patch太长，那么你需要将其分割。</p><p><strong>包含完整的patch描述</strong>：提交patch时，需要包含完整的正当性描述，不要仅仅说这是第几版patch。</p><p><strong>不要仅仅包含一个commit的SHA-1 ID</strong>：如果想要引用一个具体的commit，不要仅仅提供一个SHA-1 ID，也要包含一行commit的总结，来方便reviewer更容易理解。至少包含前12个SHA-1 ID字符，内核中的object相当的多，字符较少时碰撞是大概率的，即使现在没有，也不能保证五年以后~~~</p><p><strong>当你的patch修复了一个指定commit的bug</strong>：使用<code>Fixes:</code>tag加12个字符的SHA-1 ID，还有一行的总结。</p><h2 id="如何分割你的patch"><a href="#如何分割你的patch" class="headerlink" title="如何分割你的patch"></a>如何分割你的patch</h2><p><strong>当你的patch包含一个bug修复和一个性能增强</strong>：将他们分为两个或更多patch。</p><p><strong>如果你新增了一个API，并在另一个文件使用了这个API</strong>：将他们分为两个。</p><p><strong>如果你对多个文件做了同一个更改</strong>：将这些更改作为一个patch即可，因为这是同个逻辑的修改。</p><p><strong>每一个补丁都应该便于理解</strong>：每一个补丁都应该是合理的，并且有他们自己的merits。</p><p><strong>如果一个patch依赖另一个patch</strong>：简单的标记“this patch depends on patch X”即可。</p><p><strong>分割patch时，特别注意内核能否构建和运行</strong>：patch序列中的每一个哦。</p><p><strong>当时实在无法压缩你的patch set</strong>：那么，你可以每次发送15个左右，然后等待review和integration。</p><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p><strong>不检查代码风格是在浪费reviewer的时间</strong>：当然也会导致你的patch被拒绝。</p><p><strong>一种例外</strong>：当你仅仅是移动一段代码从一个文件到另一个地方，那么你的patch应该保持干净，这个patch应该仅有移动的动作。</p><p><strong>代码风格检查脚本</strong>：<code>scripts/checkpatch.pl</code></p><h2 id="选择patch的接受人"><a href="#选择patch的接受人" class="headerlink" title="选择patch的接受人"></a>选择patch的接受人</h2><p><strong>发现MAINTAINERS的脚本</strong>：<code>scripts/get_maintainer.pl</code></p><p><strong>实在找不到MAINTAINERS</strong>：找  Andrew Morton (<a href="mailto:&#97;&#107;&#112;&#x6d;&#x40;&#x6c;&#x69;&#110;&#x75;&#x78;&#45;&#x66;&#111;&#x75;&#110;&#100;&#x61;&#116;&#x69;&#111;&#110;&#46;&#x6f;&#x72;&#103;">akpm@linux-foundation.org</a>)</p><p><strong>选择一个邮件列表</strong>：<a href="mailto:&#x6c;&#105;&#x6e;&#x75;&#120;&#45;&#107;&#101;&#x72;&#x6e;&#101;&#x6c;&#x40;&#x76;&#103;&#101;&#x72;&#46;&#107;&#x65;&#x72;&#x6e;&#101;&#108;&#x2e;&#x6f;&#114;&#103;">linux-kernel@vger.kernel.org</a> 是最后的手段（这个内容太多了），通常你应该在MAINTAINERS文件中找特定子系统的邮件列表，你的补丁可以获得更多关注，但是<em>不要向无关的列表发送垃圾邮件</em>。</p><p><strong>不要一次发送超过15个邮件！！！！</strong></p><p><strong>安全相关的patch</strong>：如果你修复了一个安全相关的bug，发送邮件到<a href="mailto:&#115;&#x65;&#99;&#x75;&#114;&#105;&#x74;&#x79;&#64;&#107;&#101;&#114;&#x6e;&#101;&#108;&#x2e;&#x6f;&#x72;&#x67;">security@kernel.org</a>，修复一个发行版的严重bug时，需要同时抄送到stable maintainers。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Cc: stable@vger.kernel.org<br></code></pre></td></tr></table></figure><p><strong>添加Sign-off</strong></p><p><strong>如果你的修改涉及内核用户态</strong>：发送一个man-page patch到MAN-PAGES的MAINTAINERS，或者至少发送一个更改通知，用户空间的API修改也应该备份到<a href="mailto:&#x6c;&#x69;&#110;&#117;&#120;&#x2d;&#x61;&#112;&#105;&#64;&#118;&#103;&#101;&#x72;&#46;&#107;&#x65;&#114;&#110;&#x65;&#108;&#x2e;&#111;&#x72;&#x67;">linux-api@vger.kernel.org</a>。</p><p><strong>一些琐碎的patch</strong>：也许你可以抄送到Trivial Patch Monkey<a href="mailto:&#x74;&#114;&#105;&#118;&#105;&#97;&#108;&#64;&#x6b;&#x65;&#114;&#110;&#101;&#x6c;&#x2e;&#x6f;&#x72;&#103;">trivial@kernel.org</a>。</p><h2 id="邮件大小"><a href="#邮件大小" class="headerlink" title="邮件大小"></a>邮件大小</h2><p><strong>当你的邮件大小超过300k</strong>：不要将过大的邮件发送到邮件列表和maintainers，超过300k的邮件更好的方法是将你的patch放在服务器上，并且提供一个URL指向你的patch。特别注意：如果你的patch超过300k，几乎可以确定它需要分解。</p><h2 id="响应审查评论"><a href="#响应审查评论" class="headerlink" title="响应审查评论"></a>响应审查评论</h2><p><strong>忽略评审人是一个被评审人忽略的好办法</strong>：不会带来代码更改的评论或问题几乎肯定会带来评论或者日志的更改，以便于下一个评审人更好的理解发生了什么。</p><h2 id="保持耐心"><a href="#保持耐心" class="headerlink" title="保持耐心"></a>保持耐心</h2><p><strong>评审人很忙</strong>：在确保发送到执行位置后，耐心等待至少一周。</p><h2 id="邮件请加-PATCH-前缀"><a href="#邮件请加-PATCH-前缀" class="headerlink" title="邮件请加[PATCH]前缀"></a>邮件请加[PATCH]前缀</h2><p><strong>在补丁邮件前加[PATCH]前缀</strong>：以便于linus和其他内核开发者注意到。</p><h2 id="开发者的个人标识"><a href="#开发者的个人标识" class="headerlink" title="开发者的个人标识"></a>开发者的个人标识</h2><p><strong>在你的补丁中，添加sign-off</strong>：作为你的补丁标识（请使用真实姓名）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Signed-off-by: Random J Developer &lt;random@developer.example.org&gt;<br></code></pre></td></tr></table></figure><p><strong>当你作为一个maintainer</strong>：你有时会需要修改补丁，然后才能将其合入，你可以在提交者的sign-off之下和你的sign-off中间增加一行，指明你修改的特性。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Signed-off-by: Random J Developer &lt;random@developer.example.org&gt;<br>[lucky@maintainer.example.org: struct foo moved from foo.c to foo.h]<br>Signed-off-by: Lucky K Maintainer &lt;lucky@maintainer.example.org&gt;<br></code></pre></td></tr></table></figure><p><strong>特殊的向后兼容</strong>：在commit message顶部，Date的下面，增加一个标识</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">Date:   Tue Oct 7 07:26:38 2014 -0400<br><br>  libata: Un-break ATA blacklist<br><br>  commit 1c40279960bcd7d52dbdf1d466b20d24b99176c8 upstream.<br></code></pre></td></tr></table></figure><p>或者，一旦补丁向后移植，会出现问题时</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">Date:   Tue May 13 22:12:27 2008 +0200<br><br>    wireless, airo: waitbusy() won&#x27;t delay<br><br>    [backport of 2.6 commit b7acbdfbd1f277c1eb23f344f899cfa4cd0bf36a]<br></code></pre></td></tr></table></figure><h2 id="一些有用的标识"><a href="#一些有用的标识" class="headerlink" title="一些有用的标识"></a>一些有用的标识</h2><p><strong>Signed-off-by</strong>：谁完成了整个补丁。</p><p><strong>Acked-by</strong>：通常被用来既不贡献也不转发补丁时使用。不像Signed-off-by那样正式，acker至少审查了该patch并表示接受。并且，该标识并不一定表示对整个补丁的确认，例如，如果一个补丁影响多个子系统，那么来自某个子系统maintainer的ack表示仅对该子系统的影响。</p><p><strong>可以通过Cc添加抄送</strong></p><p><strong>Co-Developed-by</strong>：共同开发者，当多人处理单个补丁时，这很有用，注意，此人还要再补丁中具有Signed-off-by</p><p><strong>Reported-by</strong>：发现bug的人。</p><p><strong>Tested-by</strong>：该补丁已经由指定的人员成功测试</p><p><strong>Reviewed-by</strong>：指明该补丁已经被review过并且被接受。</p><p><strong>Suggested-by</strong>：该补丁的想法是由指定的人建议的</p><p><strong>Fixes</strong>：指明该补丁修复了一个bug在前面的commit中</p><h2 id="patch的标准格式"><a href="#patch的标准格式" class="headerlink" title="patch的标准格式"></a>patch的标准格式</h2><p><strong>from</strong>：指定补丁的作者</p><p><strong>补丁正文</strong>：75列换行，将被永久复制到变更日志中以描述此补丁</p><p><strong>一个空行</strong>：</p><p><strong>Signed-off-by</strong>：一行，也会被加入到变更日志中</p><p><strong>—</strong>：标识行，仅包含—，标志变更日志结束，— 标记后面的附加注释的一个很好的用途是用于 diffstat，显示哪些文件已更改，以及每个文件插入和删除的行数。 diffstat 对于较大的补丁特别有用。 其他仅与当前或维护者相关、不适合永久变更日志的评论也应该放在这里。 此类注释的一个很好的例子可能是补丁更改日志，它描述了补丁的 v1 和 v2 版本之间发生的更改。</p><p><strong>任何不适合变更日志的附加评论</strong></p><p><strong>事实上的补丁</strong>：diff的输出</p><hr><p><strong>主题行格式</strong>：使得按主题字母顺序排序变得容易</p><p><strong>标题应声明子系统</strong>：电子邮件主题中的子系统应标识正在修补内核的哪个区域或子系统。</p><p><strong>标题摘要</strong>：简明地描述该邮件包含的补丁，你的标题摘要将成为你的补丁的唯一标识符（可以通过gitk或者git log –oneline来查看）。标题摘要不应该是文件名，不要使用相似的摘要在整个补丁集中。</p><p>基于以上理由，标题摘要必须满足不超过70-75个字符，同时既能描述补丁的change，也能说明补丁的必要性。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Subject: [PATCH 001/123] subsystem: summary phrase<br></code></pre></td></tr></table></figure><p><strong>摘要短语可以使用方括号中的标签作为前缀</strong>：标签不视为摘要的一部分，但描述了应该如何处理补丁，如多个版本v1,v2,v3，或者RFC（request for comments）请求评论，多个补丁需要补丁序列，如1&#x2F;4, 2&#x2F;4, 3&#x2F;4, 4&#x2F;4等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Subject: [PATCH &lt;tag&gt;...] &lt;summary phrase&gt;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Subject: [PATCH 2/5] ext2: improve scalability of bitmap searching<br>Subject: [PATCH v2 01/27] x86: fix eflags tracking<br></code></pre></td></tr></table></figure><p><strong>from必须是第一行</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">From: Original Author &lt;author@example.com&gt;<br></code></pre></td></tr></table></figure><p><strong>正文将永远进入到变更日志</strong>：解释正文将致力于永久源代码变更日志，因此对于那些早已忘记了可能导致此补丁的讨论的直接细节的有能力的读者来说应该是有意义的。 包含补丁所解决的故障症状（内核日志消息、oops 消息等）对于可能搜索提交日志以查找适用补丁的人来说特别有用。 如果补丁修复了编译失败，则可能不需要包含所有编译失败； 足以让搜索该补丁的人能够找到它。 正如摘要短语一样，简洁和描述性都很重要。</p><h2 id="拉取请求"><a href="#拉取请求" class="headerlink" title="拉取请求"></a>拉取请求</h2><p><strong>pull</strong>：如果你有一系列的patch，更方便的方法应该是由maintainer去pull你的代码到他的子系统仓库，然而，从邮件列表中pull需要更多的信任度，比起从开发人员那里来说。</p><p>拉取请求的主题行中，应该包含[GIT]或者[PULL]，请求本身应该包含仓库名和分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">Please pull from<br><br>    git://jdelvare.pck.nerim.net/jdelvare-2.6 i2c-for-linus<br><br>to get these changes:<br></code></pre></td></tr></table></figure><p>拉取请求还应该包含一条综述，说明请求中包含哪些内容，可以使用git request-pull</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>嵌入式Linux内核移植两三事</title>
    <link href="/2025/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E5%86%85%E6%A0%B8%E7%A7%BB%E6%A4%8D%E4%B8%A4%E4%B8%89%E4%BA%8B/"/>
    <url>/2025/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E5%86%85%E6%A0%B8%E7%A7%BB%E6%A4%8D%E4%B8%A4%E4%B8%89%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="嵌入式Linux内核移植两三事"><a href="#嵌入式Linux内核移植两三事" class="headerlink" title="嵌入式Linux内核移植两三事"></a>嵌入式Linux内核移植两三事</h1><h2 id="内核源码的来源"><a href="#内核源码的来源" class="headerlink" title="内核源码的来源"></a>内核源码的来源</h2><p>有三种方式：</p><ol><li><code>Linux</code>社区</li><li>芯片原厂（如恩智浦<code>linux-imx</code>）</li><li>板卡厂商（如韬睿<code>toradex</code>）</li></ol><h3 id="Linux社区"><a href="#Linux社区" class="headerlink" title="Linux社区"></a>Linux社区</h3><p>优势：更注重通用性</p><p>劣势：没有对单个具体平台的优化</p><h3 id="芯片原厂"><a href="#芯片原厂" class="headerlink" title="芯片原厂"></a>芯片原厂</h3><p>优势：在社区源码的基础上，针对某款芯片（如<code>imx8qm</code>）做了优化，适配了特定的<code>BSP</code>驱动，而这些驱动可能并还没来得及合入社区主线</p><p>劣势：易用性不足，文档不足</p><h3 id="板卡厂商"><a href="#板卡厂商" class="headerlink" title="板卡厂商"></a>板卡厂商</h3><p>优势：注重用户体验，文档充足</p><p>劣势：封装更好意味着学习者对原理的理解会不足</p><h2 id="内核移植的三个类型"><a href="#内核移植的三个类型" class="headerlink" title="内核移植的三个类型"></a>内核移植的三个类型</h2><h3 id="内核架构移植"><a href="#内核架构移植" class="headerlink" title="内核架构移植"></a>内核架构移植</h3><p>将<code>Linux</code>内核从一种架构（如<code>x86</code>）移植到另一种架构（如<code>ARM</code>等）</p><p>影响范围：通常需要调整内核体系结构相关的代码</p><div class="note note-info">            <p>通常由芯片原厂进行</p>          </div><h4 id="内核体系结构都涉及哪些代码？"><a href="#内核体系结构都涉及哪些代码？" class="headerlink" title="内核体系结构都涉及哪些代码？"></a>内核体系结构都涉及哪些代码？</h4><h3 id="BSP移植"><a href="#BSP移植" class="headerlink" title="BSP移植"></a>BSP移植</h3><h4 id="BSP是什么？"><a href="#BSP是什么？" class="headerlink" title="BSP是什么？"></a>BSP是什么？</h4><p><code>BSP</code>是<code>board support package</code>的缩写，也就是板级支持包，其主要作用是可以将硬件和<code>Linux</code>内核连接起来</p><p>也就是说：<code>BSP</code>提供了<code>Linux</code>内核可以在硬件上跑起来的所有环境，包括设备树，驱动等</p><h4 id="BSP移植的内容"><a href="#BSP移植的内容" class="headerlink" title="BSP移植的内容"></a>BSP移植的内容</h4><p>将<code>Linux</code>内核移植到一个新的开发板或嵌入式设备上</p><p>影响范围：新硬件的驱动，设备树，引导加载程序等</p><div class="note note-info">            <p>通常由板卡厂商来进行</p>          </div><h3 id="平台移植"><a href="#平台移植" class="headerlink" title="平台移植"></a>平台移植</h3><p>将<code>Linux</code>内核从一个特定硬件平台移植到另一个特定硬件平台</p><p>影响范围：设备树文件或配置，外设删减，引脚复用等</p><div class="note note-info">            <p>通常由终端客户进行</p>          </div><h2 id="烧录"><a href="#烧录" class="headerlink" title="烧录"></a>烧录</h2><p>嵌入式的板卡，一般除了运行内存<code>RAM</code>之外，还会有焊接在板子上的，称为<code>eMMC</code>的<code>NAND</code>闪存（就是通常意义上的磁盘）</p><p>运行内存的部分特殊区域，会直接映射到<code>eMMC</code>上，当然也会有其他设备的寄存器区域，详细信息需要查看板卡的<code>Reference Manual</code>，其中有一章<code>Memory Map</code>，讲述了内存的布局</p><p>板卡复位后，会从指定的地址（这个地址往往是板卡厂商预设好的）开始执行，也就是<code>bootstrap</code>阶段，这个在传统PC上就是执行<code>BIOS</code>代码的地方，这个阶段会初始化一些基本的硬件组件，比如时钟，<code>DDR(内存)</code>，等，然后检测启动设备，比如从<code>SD</code>卡启动，从<code>eMMC</code>启动等</p><p>以<code>eMMC</code>为例，接着就是读取<code>eMMC</code>中的<code>uboot</code>，<code>uboot</code>负责加载内核镜像和设备树，接着交给内核执行，内核读取根文件系统，启动完成</p><p>通过上面的分析，<code>bootstrap</code>阶段的代码是芯片厂商内置在<code>ROM</code>中的，这个代码不需要我们插手，嵌入式工程师需要关注的有四个部分：</p><ol><li>引导加载器<code>uboot</code></li><li>内核<code>image</code></li><li>设备树<code>dtb</code></li><li>根文件系统<code>ramdisk</code></li></ol><p>其中引导加载器主要负责初始化硬件，然后加载内核，设备树，根文件系统，之后将执行流交给内核（注意，<code>uboot</code>只是加载设备树和根文件到内存中，具体对它们的解析是由内核完成的，<code>uboot</code>只是将其在内存中的地址传给内核）</p><p>内核也就是操作系统本身</p><p>设备树用来告诉内核，你有哪些硬件可以使用，硬件规格是什么</p><p>根文件系统则放置了一些基本的命令，你可以通过根文件系统里面的<code>shell</code>和内核进行交互(没有根文件系统的内核，没有交互可言)</p><div class="note note-light">            <p>发现了么？所谓的启动，至少要有三次，一次是<code>BIOS</code>代码，一次是<code>uboot</code>（服务器上可能是<code>grub</code>等），一次是内核。并且它们都要初始化硬件</p><p>比如<code>BIOS</code>至少要初始化时钟和<code>DDR</code>（没有<code>DDR</code>都没法去执行<code>uboot</code>了，所有的可执行代码都要放在内存上才能执行）</p><p><code>uboot</code>要初始化比如时钟，串口<code>UART</code>，网卡<code>ENET</code>等硬件，然后加载内核</p><p>在内核中，也要初始化硬件，这次是内核要用到的所有硬件（硬件信息从设备树中获取）</p><p>其中内核初始化后的硬件功能最完整，最强大，前面两个阶段的硬件初始化只是为内核打地基（比如<code>uboot</code>不会初始化<code>PCIE</code>相关的硬件，因为<code>uboot</code>用不到）</p>          </div><p>那么，终于回到本章主题，所谓烧录就是指，将上面讨论的那四个组件，写入到嵌入式板卡的持久化存储设备中（常见是<code>eMMC</code>）</p><p>目标定下了，途径也可以是多种多样的，常见的有<code>OTG</code>烧录，网络烧录，<code>SD</code>卡烧录，<code>JTAG</code>烧录等</p><p>现在来考虑，一个裸机的嵌入式板卡，除了固件里面有一段<code>BIOS</code>代码之外，其余什么都没有，而焊接在板卡上的<code>eMMC</code>是块设备，使用它的前提是对块设备进行分区（通常使用<code>fdisk, parted</code>等），并对其分区格式化好某种文件系统（<code>mkfs.vfat, mkfs.ext3</code>等）</p><div class="note note-info">            <p>比如启动分区（内核镜像，设备树等内容所在的分区）一般是<code>FAT32</code><br>根文件系统的分区一般是<code>ext3</code>，<code>ext4</code>等<br>顺便一提，<code>fdisk</code>只能格式化为<code>DOS</code>分区，也就是<code>MBR</code>主引导目录格式</p><p><code>parted</code>可以格式化为<code>GPT</code>分区</p>          </div><p>请注意，格式化磁盘一般是操作系统才有的功能，而嵌入式板子上的<code>eMMC</code>是焊接在板子上的，你也不可能把它取下来，挂载在一个<code>Linux</code>&#x2F;<code>Windows</code>&#x2F;<code>Mac</code>上对其进行格式化，这就需要一些巧妙的方式，接下来我们一一道来。</p><h3 id="OTG烧录"><a href="#OTG烧录" class="headerlink" title="OTG烧录"></a>OTG烧录</h3><p>所谓<code>OTG</code>就是<code>USB On - The - Go(OTG)</code>技术允许设备在没有主机（如计算机）的情况下，直接进行设备间的数据传输。在 OTG 烧录中，通常是将具备 OTG 功能的嵌入式设备与存储有镜像文件的 USB 存储设备（如 U 盘）直接连接，或者与另一台作为烧录主机的设备连接。嵌入式设备通过内置的 OTG 驱动程序识别 USB 存储设备，并从中读取镜像文件，然后按照预设的烧录流程将镜像写入自身的存储介质中。</p><div class="note note-light">            <p><code>OTG</code>需要硬件支持，即：</p><ol><li>开发板需要支持<code>OTG</code></li><li>开发板连接到主机</li><li>主机有<code>OTG</code>驱动程序和相关依赖库</li></ol>          </div><p>一般的操作是：连接开发板，直接将一份镜像（包括<code>uboot</code>，<code>image</code>，<code>dtb</code>，<code>ramdisk</code>）通过<code>OTG</code>放入<strong>嵌入式设备的内存</strong>中，然后启动这个跳转到这个<code>image</code>启动，这样开发板上就有了一个操作系统可用，就可以直接用这个操作系统格式化好<code>eMMC</code>，然后把要烧录进板子的镜像拷贝到<code>eMMC</code>上，就烧录好了，再次启动时，<code>BIOS</code>从<code>eMMC</code>启动，就可以启动拷贝进来的系统了</p><p>格式化<code>eMMC</code>一般会分两个分区，一个<code>boot</code>分区，一个文件系统分区，<code>boot</code>分区中存放内核，设备树，文件系统分区存放根文件系统</p><p>在<code>eMMC</code> 上，<code>uboot</code>所在的分区一般是写保护的，如果你想要写这个分区，需要先打开写保护（把只读关掉）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 这里的boot0就是eMMC特有的启动分区，eMMC的每一个硬件分区都是独立编址的</span><br><span class="hljs-built_in">echo</span> 0 &gt; /sys/block/mmcblkxxxboot0/force_ro<br></code></pre></td></tr></table></figure><p>下面开始拷贝镜像，先是<code>uboot</code>，拷贝到<code>eMMC</code>的<code>boot0</code>分区里面</p><p>然后格式化<code>boot</code>分区，将其格式化为<code>FAT32</code>，挂载该分区，然后放入内核镜像和设备树，卸载该分区</p><p>最后格式化文件系统分区，将其格式化为<code>ext3/4</code>，挂载该分区，然后放入根文件系统，以及可能需要到的内核模块，卸载该分区</p><p>这时，开发板已经烧录好系统了</p><h3 id="SD卡烧录"><a href="#SD卡烧录" class="headerlink" title="SD卡烧录"></a>SD卡烧录</h3><p>首先准备一个<code>SD</code>卡，先将其<code>fdisk</code>进行分区，并将其格式化为<code>FAT32</code>，然后将一个格式化板卡<code>eMMC</code>的镜像（引导固件），和要烧写到板卡上的镜像（烧写在板卡上的操作系统），都拷贝到这个<code>SD</code>卡中</p><p>板卡设定为从<code>SD</code>卡启动，然后会首先去读取<code>uboot</code>，<code>uboot</code>去加载内核和设备树，挂载根文件系统，此时一个操作系统已经启动了，就可以用这个操作系统将要烧写的镜像拷贝到<code>eMMC</code>中了（和上面<code>OTG</code>步骤一样，先格式化<code>eMMC</code>，然后拷贝）</p>]]></content>
    
    
    <categories>
      
      <category>嵌入式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>嵌入式</tag>
      
      <tag>Linux内核移植</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
